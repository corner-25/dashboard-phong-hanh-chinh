import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np
import os
from pathlib import Path
import json
import requests
import base64
import hashlib
import time

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Dashboard B√°o C√°o H√†nh Ch√≠nh - Pivot Table",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .stDataFrame {
        font-size: 12px;
    }
    .stDataFrame table {
        width: 100% !important;
    }
    .stDataFrame td, .stDataFrame th {
        white-space: nowrap !important;
        overflow: visible !important;
        text-overflow: clip !important;
        max-width: none !important;
        min-width: 120px !important;
    }
    .pivot-table {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    .metric-card {
        background-color: #e9ecef;
        padding: 15px;
        border-radius: 8px;
        margin: 5px 0;
        text-align: center;
    }
    .sparkline {
        height: 30px;
        margin: 0;
        padding: 0;
    }
    .category-header {
        background-color: #f0f2f6;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
        border-left: 4px solid #1f77b4;
        font-weight: bold;
    }
    .sub-category {
        padding-left: 20px;
        margin: 2px 0;
    }
    .positive-change {
        color: #28a745 !important;
        font-weight: bold !important;
        background-color: rgba(40, 167, 69, 0.1) !important;
        padding: 2px 4px !important;
        border-radius: 3px !important;
    }
    .negative-change {
        color: #dc3545 !important;
        font-weight: bold !important;
        background-color: rgba(220, 53, 69, 0.1) !important;
        padding: 2px 4px !important;
        border-radius: 3px !important;
    }
    .no-change {
        color: #6c757d !important;
        font-weight: bold !important;
        background-color: rgba(108, 117, 125, 0.1) !important;
        padding: 2px 4px !important;
        border-radius: 3px !important;
    }
    .full-width-table {
        overflow-x: auto;
        width: 100%;
        position: relative;
    }
    .full-width-table table {
        min-width: 100%;
        table-layout: auto;
    }
    .full-width-table td {
        white-space: nowrap;
        padding: 8px 12px;
        min-width: 150px;
    }
    .full-width-table th:first-child,
    .full-width-table td:first-child {
        position: sticky;
        left: 0;
        background-color: #f8f9fa;
        z-index: 10;
        border-right: 2px solid #dee2e6;
        min-width: 250px !important;
        max-width: 250px !important;
    }
    .full-width-table th:last-child,
    .full-width-table td:last-child {
        position: sticky;
        right: 0;
        background-color: #e9ecef;
        z-index: 10;
        border-left: 2px solid #dee2e6;
        font-weight: bold;
        min-width: 120px !important;
    }
    .number-cell {
        text-align: right;
        font-family: 'Courier New', monospace;
        font-weight: bold;
    }
    
    /* Mobile optimizations */
    @media (max-width: 768px) {
        .main .block-container {
            padding: 0.5rem;
        }
        
        .stButton > button {
            width: 100%;
            margin: 2px 0;
        }
        
        .stDataFrame {
            font-size: 10px;
        }
    }
    
    /* Weekly upload specific styles */
    .upload-header {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        text-align: center;
    }
    
    .upload-title {
        color: white;
        font-size: 1.8rem;
        font-weight: bold;
        margin: 0;
    }
    
    .upload-subtitle {
        color: #f0f0f0;
        font-size: 0.9rem;
        margin: 10px 0 0 0;
    }
    
    .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 8px;
    }
    
    .status-online { background-color: #28a745; }
    .status-loading { background-color: #ffc107; }
    .status-offline { background-color: #dc3545; }
</style>
""", unsafe_allow_html=True)

# ================== WEEKLY UPLOAD MANAGER CLASS ==================
class WeeklyUploadManager:
    """
    Qu·∫£n l√Ω upload h√†ng tu·∫ßn v·ªõi auto-cleanup
    - 1 file duy nh·∫•t m·ªói th·ªùi ƒëi·ªÉm
    - Auto x√≥a file c≈© khi upload m·ªõi
    - Optimized cho storage
    """
    
    def __init__(self):
        self.github_token = st.secrets.get("github_token", None)
        self.github_owner = st.secrets.get("github_owner", None)
        self.github_repo = st.secrets.get("github_repo", None)
        
        # File naming strategy
        self.current_data_file = "current_dashboard_data.json"
        self.metadata_file = "upload_metadata.json"
        self.backup_prefix = "backup_"
        
        # Settings
        self.keep_backups = 2
        self.max_file_size_mb = 25
    
    def check_github_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi GitHub"""
        if not all([self.github_token, self.github_owner, self.github_repo]):
            return False, "‚ùå Ch∆∞a c·∫•u h√¨nh GitHub credentials"
        
        try:
            url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}"
            headers = {"Authorization": f"token {self.github_token}"}
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                return True, "‚úÖ GitHub k·∫øt n·ªëi th√†nh c√¥ng"
            else:
                return False, f"‚ùå GitHub error: {response.status_code}"
                
        except Exception as e:
            return False, f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}"
    
    def get_current_file_info(self):
        """L·∫•y th√¥ng tin file hi·ªán t·∫°i"""
        try:
            metadata_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/{self.metadata_file}"
            headers = {"Authorization": f"token {self.github_token}"}
            
            response = requests.get(metadata_url, headers=headers)
            
            if response.status_code == 200:
                file_data = response.json()
                content = base64.b64decode(file_data['content']).decode()
                metadata = json.loads(content)
                return metadata
            
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc metadata: {str(e)}")
        
        return None
    
    def create_backup_of_current_file(self):
        """Backup file hi·ªán t·∫°i tr∆∞·ªõc khi x√≥a"""
        try:
            current_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/{self.current_data_file}"
            headers = {"Authorization": f"token {self.github_token}"}
            
            response = requests.get(current_url, headers=headers)
            
            if response.status_code == 200:
                file_data = response.json()
                
                current_metadata = self.get_current_file_info()
                if current_metadata:
                    upload_time = current_metadata.get('upload_time', datetime.now().isoformat())
                    backup_timestamp = upload_time[:19].replace(':', '-').replace(' ', '_')
                else:
                    backup_timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
                
                backup_filename = f"{self.backup_prefix}{backup_timestamp}.json"
                
                backup_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/{backup_filename}"
                
                backup_payload = {
                    "message": f"üì¶ Backup before new upload - {backup_timestamp}",
                    "content": file_data['content'],
                    "branch": "main"
                }
                
                backup_response = requests.put(backup_url, headers=headers, json=backup_payload)
                
                if backup_response.status_code == 201:
                    st.info(f"üì¶ ƒê√£ backup file c≈©: {backup_filename}")
                    return backup_filename
                    
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ backup file c≈©: {str(e)}")
        
        return None
    
    def cleanup_old_backups(self):
        """X√≥a c√°c backup c≈©, ch·ªâ gi·ªØ l·∫°i s·ªë l∆∞·ª£ng nh·∫•t ƒë·ªãnh"""
        try:
            contents_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents"
            headers = {"Authorization": f"token {self.github_token}"}
            
            response = requests.get(contents_url, headers=headers)
            
            if response.status_code == 200:
                files = response.json()
                
                backup_files = [f for f in files if f['name'].startswith(self.backup_prefix)]
                backup_files.sort(key=lambda x: x['name'], reverse=True)
                files_to_delete = backup_files[self.keep_backups:]
                
                deleted_count = 0
                for file_to_delete in files_to_delete:
                    try:
                        delete_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/{file_to_delete['name']}"
                        
                        delete_payload = {
                            "message": f"üóëÔ∏è Auto cleanup old backup: {file_to_delete['name']}",
                            "sha": file_to_delete['sha'],
                            "branch": "main"
                        }
                        
                        delete_response = requests.delete(delete_url, headers=headers, json=delete_payload)
                        
                        if delete_response.status_code == 200:
                            deleted_count += 1
                            
                    except Exception as e:
                        continue
                
                if deleted_count > 0:
                    st.info(f"üóëÔ∏è ƒê√£ x√≥a {deleted_count} backup c≈©")
                    
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ cleanup backups: {str(e)}")
    
    def upload_new_file(self, data, filename):
        """Upload file m·ªõi v·ªõi auto-cleanup"""
        
        try:
            connected, message = self.check_github_connection()
            if not connected:
                st.error(message)
                return False
            
            st.info("üîÑ B·∫Øt ƒë·∫ßu upload file m·ªõi...")
            
            with st.spinner("üì¶ ƒêang backup file c≈©..."):
                backup_filename = self.create_backup_of_current_file()
            
            with st.spinner("üìä ƒêang chu·∫©n b·ªã d·ªØ li·ªáu..."):
                new_data_package = {
                    'data': data.to_dict('records'),
                    'columns': list(data.columns),
                    'metadata': {
                        'filename': filename,
                        'upload_time': datetime.now().isoformat(),
                        'week_number': datetime.now().isocalendar()[1],
                        'year': datetime.now().year,
                        'row_count': len(data),
                        'file_size_mb': round(len(str(data)) / (1024*1024), 2),
                        'uploader': 'weekly_admin',
                        'replaced_backup': backup_filename
                    }
                }
                
                json_content = json.dumps(new_data_package, ensure_ascii=False, indent=2)
                size_mb = len(json_content.encode()) / (1024*1024)
                
                if size_mb > self.max_file_size_mb:
                    st.error(f"‚ùå File qu√° l·ªõn ({size_mb:.1f}MB). Gi·ªõi h·∫°n {self.max_file_size_mb}MB")
                    return False
            
            with st.spinner("‚òÅÔ∏è ƒêang upload file m·ªõi..."):
                content_encoded = base64.b64encode(json_content.encode()).decode()
                
                current_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/{self.current_data_file}"
                headers = {"Authorization": f"token {self.github_token}"}
                
                current_response = requests.get(current_url, headers=headers)
                current_sha = None
                if current_response.status_code == 200:
                    current_sha = current_response.json()['sha']
                
                upload_payload = {
                    "message": f"üìä Weekly data update - Tu·∫ßn {new_data_package['metadata']['week_number']}/{new_data_package['metadata']['year']}",
                    "content": content_encoded,
                    "branch": "main"
                }
                
                if current_sha:
                    upload_payload["sha"] = current_sha
                
                upload_response = requests.put(current_url, headers=headers, json=upload_payload)
                
                if upload_response.status_code not in [200, 201]:
                    st.error(f"‚ùå L·ªói upload: {upload_response.status_code}")
                    return False
            
            with st.spinner("üìù ƒêang c·∫≠p nh·∫≠t metadata..."):
                self.update_metadata(new_data_package['metadata'])
            
            with st.spinner("üóëÔ∏è ƒêang d·ªçn d·∫πp backup c≈©..."):
                self.cleanup_old_backups()
            
            st.success(f"""
            üéâ **UPLOAD TH√ÄNH C√îNG!**
            
            ‚úÖ **File m·ªõi:** {filename}
            ‚úÖ **D·ªØ li·ªáu:** {len(data):,} d√≤ng ({size_mb:.1f}MB)
            ‚úÖ **Tu·∫ßn:** {new_data_package['metadata']['week_number']}/{new_data_package['metadata']['year']}
            ‚úÖ **Backup:** {backup_filename if backup_filename else 'Kh√¥ng c√≥ file c≈©'}
            
            üì± **S·∫øp c√≥ th·ªÉ xem ngay tr√™n ƒëi·ªán tho·∫°i!**
            """)
            
            return True
            
        except Exception as e:
            st.error(f"‚ùå L·ªói upload: {str(e)}")
            return False
    
    def update_metadata(self, metadata):
        """C·∫≠p nh·∫≠t file metadata"""
        try:
            metadata_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/{self.metadata_file}"
            headers = {"Authorization": f"token {self.github_token}"}
            
            current_response = requests.get(metadata_url, headers=headers)
            current_sha = None
            if current_response.status_code == 200:
                current_sha = current_response.json()['sha']
            
            metadata_content = json.dumps(metadata, ensure_ascii=False, indent=2)
            content_encoded = base64.b64encode(metadata_content.encode()).decode()
            
            payload = {
                "message": f"üìù Update metadata - Tu·∫ßn {metadata['week_number']}/{metadata['year']}",
                "content": content_encoded,
                "branch": "main"
            }
            
            if current_sha:
                payload["sha"] = current_sha
            
            requests.put(metadata_url, headers=headers, json=payload)
            
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ update metadata: {str(e)}")
    
    def load_current_data(self):
        """Load d·ªØ li·ªáu hi·ªán t·∫°i"""
        try:
            current_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/{self.current_data_file}"
            headers = {"Authorization": f"token {self.github_token}"}
            
            response = requests.get(current_url, headers=headers)
            
            if response.status_code == 200:
                file_data = response.json()
                content = base64.b64decode(file_data['content']).decode()
                data_package = json.loads(content)
                
                df = pd.DataFrame(data_package['data'], columns=data_package['columns'])
                
                return df, data_package['metadata']
            
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ load d·ªØ li·ªáu: {str(e)}")
        
        return None, None
    
    def get_storage_info(self):
        """L·∫•y th√¥ng tin storage usage"""
        try:
            contents_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents"
            headers = {"Authorization": f"token {self.github_token}"}
            
            response = requests.get(contents_url, headers=headers)
            
            if response.status_code == 200:
                files = response.json()
                
                total_size = sum(f.get('size', 0) for f in files)
                backup_files = [f for f in files if f['name'].startswith(self.backup_prefix)]
                
                return {
                    'total_files': len(files),
                    'backup_files': len(backup_files),
                    'total_size_mb': round(total_size / (1024*1024), 2),
                    'files': files
                }
                
        except Exception as e:
            pass
        
        return None

# ================== PIVOT TABLE DASHBOARD CLASS (FULL ORIGINAL) ==================
class PivotTableDashboard:
    def __init__(self):
        self.data = None
        
        # C·∫§U H√åNH TH·ª® T·ª∞ ∆ØU TI√äN C·ªê ƒê·ªäNH THEO Y√äU C·∫¶U M·ªöI
        self.category_priority = {
            "VƒÉn b·∫£n ƒë·∫øn": 1,
            "VƒÉn b·∫£n ph√°t h√†nh": 2,
            "ChƒÉm s√≥c kh√°ch vip": 3,
            "L·ªÖ t√¢n": 4,
            "Ti·∫øp kh√°ch trong n∆∞·ªõc": 5,
            "S·ª± ki·ªán": 6,
            "ƒê√≥n ti·∫øp kh√°ch VIP": 7,
            "T·ªï ch·ª©c cu·ªôc h·ªçp tr·ª±c tuy·∫øn": 8,
            "Trang ƒëi·ªÅu h√†nh t√°c nghi·ªáp": 9,
            "T·ªï xe": 10,
            "T·ªïng ƒë√†i": 11,
            "H·ªá th·ªëng th∆∞ k√Ω B·ªánh vi·ªán": 12,
            "B√£i gi·ªØ xe": 13
        }
        
        self.content_priority = {
            # VƒÉn b·∫£n ƒë·∫øn
            "T·ªïng s·ªë vƒÉn b·∫£n ƒë·∫øn, trong ƒë√≥:": 1,
            "S·ªë vƒÉn b·∫£n kh√¥ng y√™u c·∫ßu ph·∫£n h·ªìi": 2,
            "S·ªë vƒÉn b·∫£n y√™u c·∫ßu ph·∫£n h·ªìi": 3,
            "X·ª≠ l√Ω ƒë√∫ng h·∫°n": 4,
            "X·ª≠ l√Ω tr·ªÖ h·∫°n": 5,
            
            # VƒÉn b·∫£n ph√°t h√†nh
            "VƒÉn b·∫£n ƒëi": 6,
            "H·ª£p ƒë·ªìng": 7,
            "Quy·∫øt ƒë·ªãnh": 8,
            "Quy ch·∫ø": 9,
            "Quy ƒë·ªãnh": 10,
            "Quy tr√¨nh": 11,
            
            # ChƒÉm s√≥c kh√°ch vip
            "Ti·∫øp ƒë√≥n, h∆∞·ªõng d·∫´n v√† ph·ª•c v·ª• kh√°ch VIP": 12,
            
            # L·ªÖ t√¢n
            "H·ªó tr·ª£ l·ªÖ t√¢n cho h·ªôi ngh·ªã/h·ªôi th·∫£o": 13,
            
            # Ti·∫øp kh√°ch trong n∆∞·ªõc
            "T·ªïng s·ªë ƒëo√†n kh√°ch trong n∆∞·ªõc, trong ƒë√≥:": 14,
            "Tham quan, h·ªçc t·∫≠p": 15,
            "L√†m vi·ªác": 16,
            
            # S·ª± ki·ªán
            "T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh c·ªßa B·ªánh vi·ªán, trong ƒë√≥:": 17,
            "Ph√≤ng H√†nh ch√≠nh ch·ªß tr√¨": 18,
            "Ph√≤ng H√†nh ch√≠nh ph·ªëi h·ª£p": 19,
            
            # ƒê√≥n ti·∫øp kh√°ch VIP
            "S·ªë l∆∞·ª£t kh√°ch VIP ƒë∆∞·ª£c l·ªÖ t√¢n ti·∫øp ƒë√≥n, h·ªó tr·ª£ kh√°m ch·ªØa b·ªánh": 20,
            
            # T·ªï ch·ª©c cu·ªôc h·ªçp tr·ª±c tuy·∫øn
            "T·ªïng s·ªë cu·ªôc h·ªçp tr·ª±c tuy·∫øn do Ph√≤ng H√†nh ch√≠nh chu·∫©n b·ªã": 21,
            
            # Trang ƒëi·ªÅu h√†nh t√°c nghi·ªáp
            "S·ªë l∆∞·ª£ng tin ƒëƒÉng ƒêHTN": 22,
            
            # T·ªï xe
            "S·ªë chuy·∫øn xe": 23,
            "T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•": 24,
            "T·ªïng km ch·∫°y": 25,
            "Xe h√†nh ch√≠nh": 26,
            "Xe c·ª©u th∆∞∆°ng": 27,
            "Chi ph√≠ b·∫£o d∆∞·ª°ng": 28,
            "Doanh thu": 29,
            "T·ªï xe": 30,
            "S·ªë phi·∫øu kh·∫£o s√°t h√†i l√≤ng": 31,
            "T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng": 32,
            
            # T·ªïng ƒë√†i
            "T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán": 33,
            "T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi": 34,
            "T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y": 35,
            "S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)": 36,
            "Nh·ª° do t·ª´ ch·ªëi (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)": 37,
            "Nh·ª° do kh√¥ng b·∫Øt m√°y (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)": 38,
            "S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 1-C·∫•p c·ª©u)": 39,
            "Nh·ª° do t·ª´ ch·ªëi (Nh√°nh 1-C·∫•p c·ª©u)": 40,
            "Nh·ª° do kh√¥ng b·∫Øt m√°y (Nh√°nh 1-C·∫•p c·ª©u)": 41,
            "S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 2-T∆∞ v·∫•n Thu·ªëc)": 42,
            "Nh·ª° do t·ª´ ch·ªëi (Nh√°nh 2- T∆∞ v·∫•n Thu·ªëc)": 43,
            "Nh·ª° do kh√¥ng b·∫Øt m√°y (Nh√°nh 2-T∆∞ v·∫•n Thu·ªëc)": 44,
            "S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 3-PKQT)": 45,
            "Nh·ª° do t·ª´ ch·ªëi (Nh√°nh 3-PKQT)": 46,
            "Nh·ª° do kh√¥ng b·∫Øt m√°y  (Nh√°nh 3-PKQT)": 47,
            "S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 4-V·∫•n ƒë·ªÅ kh√°c)": 48,
            "Nh·ª° do t·ª´ ch·ªëi (Nh√°nh 4-V·∫•n ƒë·ªÅ kh√°c)": 49,
            "Nh·ª° do kh√¥ng b·∫Øt m√°y (Nh√°nh 4-V·∫•n ƒë·ªÅ kh√°c)": 50,
            "Hottline": 51,
            
            # H·ªá th·ªëng th∆∞ k√Ω B·ªánh vi·ªán
            "S·ªë th∆∞ k√Ω ƒë∆∞·ª£c s∆° tuy·ªÉn": 52,
            "S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng": 53,
            "S·ªë th∆∞ k√Ω nh·∫≠n vi·ªác": 54,
            "S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác": 55,
            "S·ªë th∆∞ k√Ω ƒë∆∞·ª£c ƒëi·ªÅu ƒë·ªông": 56,
            "T·ªïng s·ªë th∆∞ k√Ω": 57,
            "- Th∆∞ k√Ω h√†nh ch√≠nh": 58,
            "- Th∆∞ k√Ω chuy√™n m√¥n": 59,
            "S·ªë bu·ªïi sinh ho·∫°t cho th∆∞ k√Ω": 60,
            "S·ªë th∆∞ k√Ω tham gia sinh ho·∫°t": 61,
            "S·ªë bu·ªïi t·∫≠p hu·∫•n, ƒë√†o t·∫°o cho th∆∞ k√Ω": 62,
            "S·ªë th∆∞ k√Ω tham gia t·∫≠p hu·∫•n, ƒë√†o t·∫°o": 63,
            "S·ªë bu·ªïi tham quan, h·ªçc t·∫≠p": 64,
            "S·ªë th∆∞ k√Ω tham gia tham quan, h·ªçc t·∫≠p": 65,
            
            # B√£i gi·ªØ xe
            "T·ªïng s·ªë l∆∞·ª£t v√© ng√†y": 66,
            "T·ªïng s·ªë l∆∞·ª£t v√© th√°ng": 67,
            "C√¥ng su·∫•t trung b√¨nh/ng√†y": 68,
            "Doanh thu": 69,
            "S·ªë ph·∫£n √°nh khi·∫øu n·∫°i": 70
        }
        
    def load_data(self, file_path):
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel v√† √°p d·ª•ng th·ª© t·ª± ∆∞u ti√™n"""
        try:
            # ƒê·ªçc file t·ª´ ƒë∆∞·ªùng d·∫´n local
            if isinstance(file_path, str):
                self.data = pd.read_excel(file_path)
            else:
                # N·∫øu l√† uploaded file
                self.data = pd.read_excel(file_path)
                
            self.data.columns = self.data.columns.str.strip()
            
            # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
            self.data['Tu·∫ßn'] = pd.to_numeric(self.data['Tu·∫ßn'], errors='coerce')
            self.data['Th√°ng'] = pd.to_numeric(self.data['Th√°ng'], errors='coerce')
            self.data['S·ªë li·ªáu'] = pd.to_numeric(self.data['S·ªë li·ªáu'], errors='coerce')
            
            # Th√™m c·ªôt nƒÉm (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo d·ªØ li·ªáu th·ª±c t·∫ø)
            if 'NƒÉm' not in self.data.columns:
                self.data['NƒÉm'] = datetime.now().year
            
            # T·∫°o c·ªôt Qu√Ω t·ª´ Th√°ng
            self.data['Qu√Ω'] = ((self.data['Th√°ng'] - 1) // 3) + 1
            
            # T·∫°o c·ªôt k·∫øt h·ª£p ƒë·ªÉ d·ªÖ filter
            self.data['Th√°ng_NƒÉm'] = self.data.apply(lambda x: f"T{int(x['Th√°ng'])}/{int(x['NƒÉm'])}", axis=1)
            self.data['Tu·∫ßn_Th√°ng'] = self.data.apply(lambda x: f"W{int(x['Tu·∫ßn'])}-T{int(x['Th√°ng'])}", axis=1)
            
            # √ÅP D·ª§NG TH·ª® T·ª∞ ∆ØU TI√äN
            self._apply_priority_order()
            
            # T√çNH T·ª∂ L·ªÜ SO V·ªöI TU·∫¶N TR∆Ø·ªöC
            self._calculate_week_over_week_ratio()
            
            return True
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file: {str(e)}")
            return False
    
    def _apply_priority_order(self):
        """√Åp d·ª•ng th·ª© t·ª± ∆∞u ti√™n cho danh m·ª•c v√† n·ªôi dung"""
        # Th√™m c·ªôt th·ª© t·ª± ∆∞u ti√™n cho danh m·ª•c
        self.data['Danh_m·ª•c_th·ª©_t·ª±'] = self.data['Danh m·ª•c'].map(self.category_priority)
        
        # Th√™m c·ªôt th·ª© t·ª± ∆∞u ti√™n cho n·ªôi dung
        self.data['N·ªôi_dung_th·ª©_t·ª±'] = self.data['N·ªôi dung'].map(self.content_priority)
        
        # G√°n th·ª© t·ª± cao (999) cho c√°c danh m·ª•c/n·ªôi dung kh√¥ng c√≥ trong danh s√°ch ∆∞u ti√™n
        self.data['Danh_m·ª•c_th·ª©_t·ª±'] = self.data['Danh_m·ª•c_th·ª©_t·ª±'].fillna(999)
        self.data['N·ªôi_dung_th·ª©_t·ª±'] = self.data['N·ªôi_dung_th·ª©_t·ª±'].fillna(999)
        
        # S·∫Øp x·∫øp d·ªØ li·ªáu theo th·ª© t·ª± ∆∞u ti√™n
        self.data = self.data.sort_values([
            'Danh_m·ª•c_th·ª©_t·ª±', 
            'N·ªôi_dung_th·ª©_t·ª±', 
            'NƒÉm', 
            'Th√°ng', 
            'Tu·∫ßn'
        ]).reset_index(drop=True)
    
    def _calculate_week_over_week_ratio(self):
        """T√≠nh t·ª∑ l·ªá so v·ªõi tu·∫ßn tr∆∞·ªõc - LOGIC M·ªöI"""
        # Kh·ªüi t·∫°o c·ªôt
        self.data['T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc'] = None
        self.data['Thay_ƒë·ªïi_tu·∫ßn_tr∆∞·ªõc'] = None
        
        # Group theo danh m·ª•c v√† n·ªôi dung, sau ƒë√≥ t√≠nh bi·∫øn ƒë·ªông
        for (category, content), group in self.data.groupby(['Danh m·ª•c', 'N·ªôi dung']):
            # S·∫Øp x·∫øp theo nƒÉm, th√°ng, tu·∫ßn
            group_sorted = group.sort_values(['NƒÉm', 'Th√°ng', 'Tu·∫ßn']).reset_index()
            
            # B·ªè qua tu·∫ßn ƒë·∫ßu ti√™n (kh√¥ng c√≥ tu·∫ßn tr∆∞·ªõc ƒë·ªÉ so s√°nh)
            for i in range(1, len(group_sorted)):
                current_idx = group_sorted.loc[i, 'index']  # index g·ªëc trong data
                current_value = group_sorted.loc[i, 'S·ªë li·ªáu']
                previous_value = group_sorted.loc[i-1, 'S·ªë li·ªáu']
                
                # T√≠nh bi·∫øn ƒë·ªông
                if pd.notna(current_value) and pd.notna(previous_value):
                    if previous_value != 0:
                        # C√¥ng th·ª©c: (tu·∫ßn hi·ªán t·∫°i - tu·∫ßn tr∆∞·ªõc) / tu·∫ßn tr∆∞·ªõc * 100
                        ratio = ((current_value - previous_value) / previous_value) * 100
                        change = current_value - previous_value
                        
                        self.data.loc[current_idx, 'T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc'] = ratio
                        self.data.loc[current_idx, 'Thay_ƒë·ªïi_tu·∫ßn_tr∆∞·ªõc'] = change
                    elif previous_value == 0 and current_value > 0:
                        # TƒÉng t·ª´ 0 l√™n s·ªë d∆∞∆°ng
                        self.data.loc[current_idx, 'T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc'] = 999.0  # V√¥ h·∫°n
                        self.data.loc[current_idx, 'Thay_ƒë·ªïi_tu·∫ßn_tr∆∞·ªõc'] = current_value
                    # Tr∆∞·ªùng h·ª£p kh√°c (0->0, ho·∫∑c gi√° tr·ªã √¢m) gi·ªØ None
    
    def create_pivot_settings(self):
        """T·∫°o c√†i ƒë·∫∑t cho pivot table"""
        st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t Pivot Table")
        
        # Ch·ªçn ki·ªÉu b√°o c√°o
        report_type = st.sidebar.selectbox(
            "Ki·ªÉu b√°o c√°o",
            ["Theo Tu·∫ßn", "Theo Th√°ng", "Theo Qu√Ω", "Theo NƒÉm", "T√πy ch·ªânh"]
        )
        
        # Ch·ªçn d√≤ng v√† c·ªôt cho pivot
        col1, col2 = st.sidebar.columns(2)
        
        available_dims = ['Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm', 'Danh m·ª•c', 'N·ªôi dung']
        
        with col1:
            rows = st.multiselect(
                "Ch·ªçn d√≤ng (Rows)",
                available_dims,
                default=['Danh m·ª•c'] if report_type == "T√πy ch·ªânh" else self._get_default_rows(report_type)
            )
        
        with col2:
            cols = st.multiselect(
                "Ch·ªçn c·ªôt (Columns)",
                [dim for dim in available_dims if dim not in rows],
                default=self._get_default_cols(report_type)
            )
        
        # Ch·ªçn gi√° tr·ªã v√† ph√©p t√≠nh
        values = st.sidebar.selectbox(
            "Gi√° tr·ªã hi·ªÉn th·ªã",
            ["S·ªë li·ªáu"]
        )
        
        agg_func = st.sidebar.selectbox(
            "Ph√©p t√≠nh",
            ["sum", "mean", "count", "min", "max"],
            format_func=lambda x: {
                'sum': 'T·ªïng',
                'mean': 'Trung b√¨nh',
                'count': 'ƒê·∫øm',
                'min': 'Nh·ªè nh·∫•t',
                'max': 'L·ªõn nh·∫•t'
            }.get(x, x)
        )
        
        # Hi·ªÉn th·ªã bi·∫øn ƒë·ªông g·ªôp v√†o gi√° tr·ªã
        show_ratio_inline = st.sidebar.checkbox("Hi·ªÉn th·ªã bi·∫øn ƒë·ªông trong gi√° tr·ªã", value=True)
        
        return report_type, rows, cols, values, agg_func, show_ratio_inline
    
    def _get_default_rows(self, report_type):
        """L·∫•y d√≤ng m·∫∑c ƒë·ªãnh theo ki·ªÉu b√°o c√°o"""
        defaults = {
            "Theo Tu·∫ßn": ['Danh m·ª•c', 'N·ªôi dung'],
            "Theo Th√°ng": ['Danh m·ª•c'],
            "Theo Qu√Ω": ['Danh m·ª•c'],
            "Theo NƒÉm": ['Danh m·ª•c']
        }
        return defaults.get(report_type, ['Danh m·ª•c'])
    
    def _get_default_cols(self, report_type):
        """L·∫•y c·ªôt m·∫∑c ƒë·ªãnh theo ki·ªÉu b√°o c√°o"""
        defaults = {
            "Theo Tu·∫ßn": ['Tu·∫ßn'],
            "Theo Th√°ng": ['Th√°ng'],
            "Theo Qu√Ω": ['Qu√Ω'],
            "Theo NƒÉm": ['NƒÉm']
        }
        return defaults.get(report_type, ['Th√°ng'])
    
    def create_filters(self):
        """T·∫°o b·ªô l·ªçc d·ªØ li·ªáu"""
        st.sidebar.header("üîç L·ªçc d·ªØ li·ªáu")
        
        # L·ªçc theo th·ªùi gian
        time_range = st.sidebar.select_slider(
            "Kho·∫£ng th·ªùi gian",
            options=["1 Tu·∫ßn", "1 Th√°ng", "3 Th√°ng", "6 Th√°ng", "1 NƒÉm", "T·∫•t c·∫£"],
            value="1 Th√°ng"
        )
        
        # L·ªçc theo nƒÉm
        years = sorted(self.data['NƒÉm'].unique())
        selected_years = st.sidebar.multiselect(
            "Ch·ªçn nƒÉm",
            years,
            default=[max(years)]
        )
        
        # L·ªçc theo th√°ng
        if len(selected_years) == 1:
            months = sorted(self.data[self.data['NƒÉm'].isin(selected_years)]['Th√°ng'].unique())
            selected_months = st.sidebar.multiselect(
                "Ch·ªçn th√°ng",
                months,
                default=months
            )
        else:
            selected_months = list(range(1, 13))
        
        # L·ªçc theo tu·∫ßn
        if len(selected_years) == 1 and len(selected_months) == 1:
            available_weeks = sorted(self.data[
                (self.data['NƒÉm'].isin(selected_years)) & 
                (self.data['Th√°ng'].isin(selected_months))
            ]['Tu·∫ßn'].unique())
            
            selected_weeks = st.sidebar.multiselect(
                "Ch·ªçn tu·∫ßn",
                available_weeks,
                default=available_weeks
            )
        else:
            selected_weeks = list(range(1, 53))
        
        # L·ªçc theo danh m·ª•c - Hi·ªÉn th·ªã theo th·ª© t·ª± ∆∞u ti√™n
        unique_categories = self.data['Danh m·ª•c'].unique()
        
        # S·∫Øp x·∫øp danh m·ª•c theo th·ª© t·ª± ∆∞u ti√™n
        sorted_categories = sorted(unique_categories, 
                                 key=lambda x: self.category_priority.get(x, 999))
        
        selected_categories = []
        
        with st.sidebar.expander("üìÇ Ch·ªçn danh m·ª•c", expanded=True):
            select_all = st.checkbox("Ch·ªçn t·∫•t c·∫£ danh m·ª•c", value=True)
            
            if select_all:
                selected_categories = list(sorted_categories)
            else:
                for category in sorted_categories:
                    # L·∫•y danh s√°ch n·ªôi dung trong danh m·ª•c n√†y (ƒë√£ s·∫Øp x·∫øp)
                    contents_in_category = self.data[self.data['Danh m·ª•c'] == category]['N·ªôi dung'].unique()
                    sorted_contents = sorted(contents_in_category, 
                                           key=lambda x: self.content_priority.get(x, 999))
                    
                    # Checkbox cho danh m·ª•c cha
                    category_selected = st.checkbox(
                        f"üìÅ {category}", 
                        value=False,
                        key=f"cat_{category}"
                    )
                    
                    if category_selected:
                        selected_categories.append(category)
                        
                        # Hi·ªÉn th·ªã n·ªôi dung con theo th·ª© t·ª± ∆∞u ti√™n
                        st.markdown(f"**N·ªôi dung trong {category}:**")
                        for content in sorted_contents:
                            st.markdown(f"&nbsp;&nbsp;&nbsp;&nbsp;üìÑ {content}", unsafe_allow_html=True)
        
        return time_range, selected_years, selected_months, selected_weeks, selected_categories
    
    def filter_data(self, time_range, years, months, weeks, categories):
        """√Åp d·ª•ng b·ªô l·ªçc"""
        filtered = self.data.copy()
        
        # L·ªçc theo nƒÉm, th√°ng, tu·∫ßn, danh m·ª•c
        filtered = filtered[
            (filtered['NƒÉm'].isin(years)) &
            (filtered['Th√°ng'].isin(months)) &
            (filtered['Tu·∫ßn'].isin(weeks)) &
            (filtered['Danh m·ª•c'].isin(categories))
        ]
        
        return filtered
    
    def format_value_with_change(self, value, ratio, change):
        """ƒê·ªãnh d·∫°ng gi√° tr·ªã v·ªõi bi·∫øn ƒë·ªông inline - C·∫¢I TI·∫æN ƒê·ªÇ HI·ªÇN TH·ªä R√ï R√ÄNG H∆†N"""
        # ƒê·∫£m b·∫£o hi·ªÉn th·ªã s·ªë ƒë·∫ßy ƒë·ªß
        value_str = f"{value:,.0f}".replace(',', '.')
        
        if pd.isna(ratio) or ratio == 0:
            return value_str
        
        if ratio == 999:  # V√¥ h·∫°n
            return f"{value_str} <span class='positive-change'>‚Üë‚àû%</span>"
        
        if ratio > 0:
            symbol = "‚Üë"
            color_class = "positive-change"
        elif ratio < 0:
            symbol = "‚Üì"  
            color_class = "negative-change"
        else:
            symbol = "‚Üí"
            color_class = "no-change"
            
        ratio_text = f"{abs(ratio):.1f}%"
        
        # FORMAT R√ï R√ÄNG: s·ªë (bi·∫øn ƒë·ªông)
        return f"{value_str} <span class='{color_class}'>({symbol}{ratio_text})</span>"
    
    def create_hierarchical_pivot_table_with_ratio(self, data, rows, cols, values, agg_func, show_ratio_inline):
        """T·∫°o pivot table v·ªõi hi·ªÉn th·ªã ph√¢n c·∫•p v√† bi·∫øn ƒë·ªông inline"""
        try:
            if not rows and not cols:
                st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt chi·ªÅu cho d√≤ng ho·∫∑c c·ªôt")
                return None
            
            # ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n
            if 'Danh m·ª•c' in rows:
                data = data.sort_values(['Danh_m·ª•c_th·ª©_t·ª±', 'N·ªôi_dung_th·ª©_t·ª±'])
            
            # T·∫°o pivot table cho gi√° tr·ªã ch√≠nh (KH√îNG margins=True ƒë·ªÉ b·ªè t·ªïng chung)
            if cols:
                pivot = pd.pivot_table(
                    data,
                    index=rows if rows else None,
                    columns=cols,
                    values=values,
                    aggfunc=agg_func,
                    fill_value=0,
                    margins=False  # B·ªé T·ªîNG CHUNG
                )
                
                # S·ª≠a l·ªói mixed column types
                if isinstance(pivot.columns, pd.MultiIndex):
                    pivot.columns = pivot.columns.map(str)
                else:
                    pivot.columns = [str(col) for col in pivot.columns]
                    
            else:
                pivot = data.groupby(rows)[values].agg(agg_func)
            
            # N·∫øu c·∫ßn hi·ªÉn th·ªã bi·∫øn ƒë·ªông inline
            if show_ratio_inline and cols:
                # L·ªçc d·ªØ li·ªáu c√≥ bi·∫øn ƒë·ªông (kh√¥ng ph·∫£i tu·∫ßn ƒë·∫ßu ti√™n)
                ratio_data = data[pd.notna(data['T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc'])].copy()
                
                st.sidebar.success(f"üîç Debug: {len(ratio_data)} d√≤ng c√≥ bi·∫øn ƒë·ªông t·ª´ {len(data)} d√≤ng t·ªïng")
                
                if not ratio_data.empty:
                    try:
                        # T·∫°o pivot table cho gi√° tr·ªã g·ªëc
                        main_pivot = pd.pivot_table(
                            data,
                            index=rows if rows else None,
                            columns=cols,
                            values='S·ªë li·ªáu',
                            aggfunc=agg_func,
                            fill_value=0,
                            margins=False
                        )
                        
                        # T·∫°o pivot table cho t·ª∑ l·ªá bi·∫øn ƒë·ªông
                        ratio_pivot = pd.pivot_table(
                            ratio_data,
                            index=rows if rows else None,
                            columns=cols,
                            values='T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc',
                            aggfunc='mean',  # Trung b√¨nh n·∫øu c√≥ nhi·ªÅu gi√° tr·ªã
                            fill_value=None
                        )
                        
                        st.sidebar.success(f"üîç Ratio pivot: {ratio_pivot.shape}, Main pivot: {main_pivot.shape}")
                        
                        # T·∫°o combined pivot v·ªõi bi·∫øn ƒë·ªông
                        combined_pivot = main_pivot.copy()
                        
                        # √Åp d·ª•ng bi·∫øn ƒë·ªông cho t·ª´ng √¥
                        for idx in main_pivot.index:
                            for col in main_pivot.columns:
                                main_value = main_pivot.loc[idx, col]
                                
                                # Ki·ªÉm tra c√≥ bi·∫øn ƒë·ªông kh√¥ng
                                if idx in ratio_pivot.index and col in ratio_pivot.columns:
                                    ratio_val = ratio_pivot.loc[idx, col]
                                    if pd.notna(ratio_val):
                                        # C√≥ bi·∫øn ƒë·ªông - format v·ªõi %
                                        combined_pivot.loc[idx, col] = self.format_value_with_change(main_value, ratio_val, 0)
                                        continue
                                
                                # Kh√¥ng c√≥ bi·∫øn ƒë·ªông - ch·ªâ hi·ªÉn th·ªã s·ªë
                                combined_pivot.loc[idx, col] = f"{main_value:,.0f}".replace(',', '.')
                        
                        # TH√äM C·ªòT T·ªîNG
                        combined_pivot['T·ªïng'] = ""
                        for idx in combined_pivot.index:
                            row_total = 0
                            for col in main_pivot.columns:  # D√πng main_pivot ƒë·ªÉ t√≠nh t·ªïng
                                val = main_pivot.loc[idx, col]
                                if pd.notna(val):
                                    row_total += float(val)
                            combined_pivot.loc[idx, 'T·ªïng'] = f"{row_total:,.0f}".replace(',', '.')
                        
                        return combined_pivot
                        
                    except Exception as e:
                        st.sidebar.error(f"L·ªói t·∫°o bi·∫øn ƒë·ªông: {str(e)}")
                        st.sidebar.error(f"Chi ti·∫øt: {type(e).__name__}")
                        pass
            
            # N·∫øu kh√¥ng c√≥ bi·∫øn ƒë·ªông, v·∫´n th√™m c·ªôt t·ªïng
            if isinstance(pivot, pd.DataFrame):
                pivot_with_total = pivot.copy()
                pivot_with_total['T·ªïng'] = 0
                for idx in pivot_with_total.index:
                    row_total = 0
                    for col in pivot_with_total.columns:
                        if col != 'T·ªïng':
                            val = pivot.loc[idx, col]
                            if pd.notna(val):
                                row_total += float(val)
                    pivot_with_total.loc[idx, 'T·ªïng'] = f"{row_total:,.0f}".replace(',', '.')
                return pivot_with_total
            
            return pivot
            
        except Exception as e:
            st.error(f"L·ªói t·∫°o pivot table: {str(e)}")
            return None
    
    def display_category_sparklines(self, category_data, category_name, report_type):
        """Hi·ªÉn th·ªã sparklines cho t·ª´ng n·ªôi dung trong danh m·ª•c"""
        try:
            if not isinstance(category_data, pd.DataFrame):
                return
            
            # T·∫°o sparklines cho t·ª´ng n·ªôi dung trong danh m·ª•c
            col1, col2, col3 = st.columns([3, 2, 1])
            with col1:
                st.markdown("**N·ªôi dung**")
            with col2:
                st.markdown("**Xu h∆∞·ªõng**")
            with col3:
                st.markdown("**T·ªïng h√†ng**")
            
            for content in category_data.index:
                # L·∫•y d·ªØ li·ªáu cho n·ªôi dung n√†y
                content_values = []
                for col in category_data.columns:
                    val = category_data.loc[content, col]
                    if isinstance(val, str):
                        # Extract s·ªë t·ª´ HTML
                        import re
                        numbers = re.findall(r'[\d.]+', val.replace('.', ''))
                        if numbers:
                            content_values.append(int(numbers[0].replace('.', '')))
                        else:
                            content_values.append(0)
                    else:
                        content_values.append(val if pd.notna(val) else 0)
                
                # T·∫°o sparkline
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    y=content_values,
                    mode='lines+markers',
                    line=dict(width=2, color='royalblue'),
                    marker=dict(size=3),
                    showlegend=False
                ))
                
                # Highlight max/min
                if content_values and max(content_values) > 0:
                    max_idx = np.argmax(content_values)
                    min_idx = np.argmin(content_values)
                    
                    fig.add_trace(go.Scatter(
                        x=[max_idx], y=[content_values[max_idx]],
                        mode='markers', marker=dict(size=5, color='green'),
                        showlegend=False
                    ))
                    fig.add_trace(go.Scatter(
                        x=[min_idx], y=[content_values[min_idx]],
                        mode='markers', marker=dict(size=5, color='red'),
                        showlegend=False
                    ))
                
                fig.update_layout(
                    margin=dict(l=0, r=0, t=0, b=0),
                    height=40, width=200,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    xaxis=dict(showticklabels=False, showgrid=False, zeroline=False),
                    yaxis=dict(showticklabels=False, showgrid=False, zeroline=False),
                    hovermode=False
                )
                
                # T√≠nh t·ªïng h√†ng
                row_total = sum(content_values)
                
                # Hi·ªÉn th·ªã
                col1, col2, col3 = st.columns([3, 2, 1])
                with col1:
                    st.markdown(f"üìÑ {content}")
                with col2:
                    st.plotly_chart(fig, use_container_width=True, key=f"spark_{category_name}_{content}")
                with col3:
                    st.markdown(f"**{row_total:,.0f}**".replace(',', '.'))
                    
        except Exception as e:
            st.error(f"L·ªói t·∫°o sparkline cho {category_name}: {str(e)}")
    
    def display_hierarchical_pivot_improved(self, pivot, data):
        """Hi·ªÉn th·ªã pivot table v·ªõi c·∫•u tr√∫c ph√¢n c·∫•p c·∫£i ti·∫øn"""
        if pivot is None:
            return
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i pivot table v·ªõi Danh m·ª•c kh√¥ng
        if isinstance(pivot.index, pd.MultiIndex) and 'Danh m·ª•c' in pivot.index.names:
            # Hi·ªÉn th·ªã theo c·∫•u tr√∫c ph√¢n c·∫•p
            st.subheader("üìä Pivot Table theo th·ª© t·ª± ∆∞u ti√™n (c√≥ bi·∫øn ƒë·ªông)")
            
            # L·∫•y danh s√°ch c√°c danh m·ª•c theo th·ª© t·ª± ∆∞u ti√™n
            categories = pivot.index.get_level_values('Danh m·ª•c').unique()
            sorted_categories = sorted(categories, key=lambda x: self.category_priority.get(x, 999))
            
            for category in sorted_categories:
                # T·∫°o expander cho m·ªói danh m·ª•c (B·ªé HI·ªÇN TH·ªä S·ªê ∆ØU TI√äN)
                with st.expander(f"üìÅ {category}", expanded=True):
                    # L·ªçc d·ªØ li·ªáu cho danh m·ª•c n√†y
                    category_data = pivot.xs(category, level='Danh m·ª•c')
                    
                    # S·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n n·ªôi dung
                    if isinstance(category_data.index, pd.Index):
                        # L·∫•y danh s√°ch n·ªôi dung v√† s·∫Øp x·∫øp
                        contents = category_data.index.tolist()
                        sorted_contents = sorted(contents, key=lambda x: self.content_priority.get(x, 999))
                        category_data = category_data.reindex(sorted_contents)
                    
                    # T·∫°o HTML table ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß s·ªë v√† bi·∫øn ƒë·ªông
                    if isinstance(category_data, pd.DataFrame):
                        # T·∫°o HTML table ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß s·ªë v√† bi·∫øn ƒë·ªông
                        html_table = "<div class='full-width-table'>"
                        html_table += "<table style='width:100%; border-collapse: collapse; font-size: 12px;'>"
                        
                        # Header
                        html_table += "<tr style='background-color: #f0f2f6;'>"
                        html_table += "<th style='border: 1px solid #ddd; padding: 8px; text-align: left; min-width: 250px; position: sticky; left: 0; background-color: #f0f2f6; z-index: 10;'>N·ªôi dung</th>"
                        for col in category_data.columns:
                            if col == 'T·ªïng':
                                html_table += f"<th style='border: 1px solid #ddd; padding: 8px; text-align: center; min-width: 120px; position: sticky; right: 0; background-color: #f0f2f6; z-index: 10; font-weight: bold;'>{col}</th>"
                            else:
                                html_table += f"<th style='border: 1px solid #ddd; padding: 8px; text-align: center; min-width: 150px;'>{col}</th>"
                        html_table += "</tr>"
                        
                        # Data rows
                        for content in category_data.index:
                            html_table += "<tr>"
                            html_table += f"<td style='border: 1px solid #ddd; padding: 8px; font-weight: bold; position: sticky; left: 0; background-color: #f8f9fa; z-index: 10;'>{content}</td>"
                            
                            for col in category_data.columns:
                                value = category_data.loc[content, col]
                                if col == 'T·ªïng':
                                    html_table += f"<td style='border: 1px solid #ddd; padding: 8px; text-align: right; position: sticky; right: 0; background-color: #e9ecef; z-index: 10; font-weight: bold;' class='number-cell'>{value}</td>"
                                else:
                                    html_table += f"<td style='border: 1px solid #ddd; padding: 8px; text-align: right;' class='number-cell'>{value}</td>"
                            
                            html_table += "</tr>"
                        
                        html_table += "</table></div>"
                        st.markdown(html_table, unsafe_allow_html=True)
                        
                        # SPARKLINE CHO DANH M·ª§C
                        st.markdown("**üìä Xu h∆∞·ªõng cho danh m·ª•c n√†y:**")
                        
                        # Hi·ªÉn th·ªã sparklines inline cho danh m·ª•c n√†y
                        try:
                            # Header
                            html_table += "<tr style='background-color: #f0f2f6;'>"
                            html_table += "<th style='border: 1px solid #ddd; padding: 8px; text-align: left; min-width: 250px; position: sticky; left: 0; background-color: #f0f2f6; z-index: 10;'>N·ªôi dung</th>"
                            html_table += "<th style='border: 1px solid #ddd; padding: 8px; text-align: center; min-width: 150px;'>Xu h∆∞·ªõng</th>"
                            html_table += "<th style='border: 1px solid #ddd; padding: 8px; text-align: center; min-width: 120px; position: sticky; right: 0; background-color: #f0f2f6; z-index: 10;'>T·ªïng h√†ng</th>"
                            html_table += "</tr>"
                            
                            # T·∫°o b·∫£ng HTML cho sparklines
                            sparkline_html = "<div class='full-width-table'>"
                            sparkline_html += "<table style='width:100%; border-collapse: collapse; font-size: 12px;'>"
                            
                            # Header
                            sparkline_html += "<tr style='background-color: #f0f2f6;'>"
                            sparkline_html += "<th style='border: 1px solid #ddd; padding: 8px; text-align: left; min-width: 250px; position: sticky; left: 0; background-color: #f0f2f6; z-index: 10;'>N·ªôi dung</th>"
                            sparkline_html += "<th style='border: 1px solid #ddd; padding: 8px; text-align: center; min-width: 150px;'>Xu h∆∞·ªõng</th>"
                            sparkline_html += "<th style='border: 1px solid #ddd; padding: 8px; text-align: center; min-width: 120px; position: sticky; right: 0; background-color: #f0f2f6; z-index: 10;'>T·ªïng h√†ng</th>"
                            sparkline_html += "</tr>"
                            
                            sparkline_rows = []
                            
                            for content in category_data.index:
                                # L·∫•y d·ªØ li·ªáu cho n·ªôi dung n√†y
                                content_values = []
                                for col in category_data.columns:
                                    if col != 'T·ªïng':  # B·ªè qua c·ªôt T·ªïng khi t√≠nh sparkline
                                        val = category_data.loc[content, col]
                                        if isinstance(val, str):
                                            # Extract s·ªë t·ª´ HTML
                                            import re
                                            numbers = re.findall(r'[\d.]+', val.replace('.', ''))
                                            if numbers:
                                                content_values.append(int(numbers[0].replace('.', '')))
                                            else:
                                                content_values.append(0)
                                        else:
                                            content_values.append(val if pd.notna(val) else 0)
                                
                                # T·∫°o sparkline
                                fig = go.Figure()
                                fig.add_trace(go.Scatter(
                                    y=content_values,
                                    mode='lines+markers',
                                    line=dict(width=2, color='royalblue'),
                                    marker=dict(size=3),
                                    showlegend=False
                                ))
                                
                                # Highlight max/min
                                if content_values and max(content_values) > 0:
                                    max_idx = np.argmax(content_values)
                                    min_idx = np.argmin(content_values)
                                    
                                    fig.add_trace(go.Scatter(
                                        x=[max_idx], y=[content_values[max_idx]],
                                        mode='markers', marker=dict(size=5, color='green'),
                                        showlegend=False
                                    ))
                                    fig.add_trace(go.Scatter(
                                        x=[min_idx], y=[content_values[min_idx]],
                                        mode='markers', marker=dict(size=5, color='red'),
                                        showlegend=False
                                    ))
                                
                                fig.update_layout(
                                    margin=dict(l=0, r=0, t=0, b=0),
                                    height=40, width=200,
                                    paper_bgcolor='rgba(0,0,0,0)',
                                    plot_bgcolor='rgba(0,0,0,0)',
                                    xaxis=dict(showticklabels=False, showgrid=False, zeroline=False),
                                    yaxis=dict(showticklabels=False, showgrid=False, zeroline=False),
                                    hovermode=False
                                )
                                
                                # L·∫•y t·ªïng h√†ng t·ª´ c·ªôt T·ªïng
                                row_total = category_data.loc[content, 'T·ªïng'] if 'T·ªïng' in category_data.columns else sum(content_values)
                                
                                # T·∫°o row cho b·∫£ng v√† l∆∞u figure
                                sparkline_rows.append({
                                    'content': content,
                                    'fig': fig,
                                    'total': row_total
                                })
                            
                            # K·∫øt th√∫c HTML table header
                            sparkline_html += "</table></div>"
                            st.markdown(sparkline_html, unsafe_allow_html=True)
                            
                            # Hi·ªÉn th·ªã t·ª´ng row v·ªõi sparkline
                            for row_data in sparkline_rows:
                                col1, col2, col3 = st.columns([3, 2, 1])
                                with col1:
                                    st.markdown(f"üìÑ {row_data['content']}")
                                with col2:
                                    st.plotly_chart(row_data['fig'], use_container_width=True, key=f"spark_{category}_{row_data['content']}")
                                with col3:
                                    if isinstance(row_data['total'], str):
                                        st.markdown(f"**{row_data['total']}**")
                                    else:
                                        st.markdown(f"**{row_data['total']:,.0f}**".replace(',', '.'))
                                    
                        except Exception as e:
                            st.error(f"L·ªói t·∫°o sparkline cho {category}: {str(e)}")
                        
                    else:
                        # N·∫øu l√† Series
                        html_table = "<div class='full-width-table'>"
                        html_table += "<table style='width:100%; border-collapse: collapse; font-size: 12px;'>"
                        html_table += "<tr style='background-color: #f0f2f6;'>"
                        html_table += "<th style='border: 1px solid #ddd; padding: 8px;'>Danh m·ª•c</th>"
                        html_table += "<th style='border: 1px solid #ddd; padding: 8px;'>Gi√° tr·ªã</th>"
                        html_table += "</tr>"
                        html_table += "<tr>"
                        html_table += f"<td style='border: 1px solid #ddd; padding: 8px;'>{category}</td>"
                        html_table += f"<td style='border: 1px solid #ddd; padding: 8px; text-align: right;' class='number-cell'>{category_data}</td>"
                        html_table += "</tr>"
                        html_table += "</table></div>"
                        st.markdown(html_table, unsafe_allow_html=True)
                    
                    # B·ªé T·ªîNG THEO DANH M·ª§C - ch·ªâ gi·ªØ t·ªïng theo n·ªôi dung (h√†ng)
        
        elif 'Danh m·ª•c' in pivot.index.names:
            # Hi·ªÉn th·ªã pivot table ƒë∆°n gi·∫£n v·ªõi Danh m·ª•c
            st.subheader("üìä Pivot Table theo Danh m·ª•c (theo th·ª© t·ª± ∆∞u ti√™n)")
            
            # Nh√≥m theo danh m·ª•c v√† s·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n
            categories = pivot.index.unique()
            sorted_categories = sorted(categories, key=lambda x: self.category_priority.get(x, 999))
            
            for category in sorted_categories:
                with st.expander(f"üìÅ {category}", expanded=True):
                    category_data = pivot.loc[category]
                    
                    if isinstance(category_data, pd.Series):
                        html_table = "<table style='width:100%; border-collapse: collapse;'>"
                        html_table += "<tr style='background-color: #f0f2f6;'>"
                        html_table += "<th style='border: 1px solid #ddd; padding: 8px;'>Danh m·ª•c</th>"
                        html_table += "<th style='border: 1px solid #ddd; padding: 8px;'>Gi√° tr·ªã</th>"
                        html_table += "</tr>"
                        html_table += "<tr>"
                        html_table += f"<td style='border: 1px solid #ddd; padding: 8px;'>{category}</td>"
                        html_table += f"<td style='border: 1px solid #ddd; padding: 8px; text-align: right;' class='number-cell'>{category_data:,.0f}".replace(',', '.') + "</td>"
                        html_table += "</tr>"
                        html_table += "</table>"
                        st.markdown(html_table, unsafe_allow_html=True)
                    else:
                        # DataFrame case
                        html_table = "<div class='full-width-table'>"
                        html_table += "<table style='width:100%; border-collapse: collapse; font-size: 12px;'>"
                        html_table += "<tr style='background-color: #f0f2f6;'>"
                        html_table += "<th style='border: 1px solid #ddd; padding: 8px;'>N·ªôi dung</th>"
                        for col in category_data.columns:
                            html_table += f"<th style='border: 1px solid #ddd; padding: 8px; text-align: center;'>{col}</th>"
                        html_table += "</tr>"
                        
                        for idx in category_data.index:
                            html_table += "<tr>"
                            html_table += f"<td style='border: 1px solid #ddd; padding: 8px;'>{idx}</td>"
                            for col in category_data.columns:
                                value = category_data.loc[idx, col]
                                html_table += f"<td style='border: 1px solid #ddd; padding: 8px; text-align: right;' class='number-cell'>{value}</td>"
                            html_table += "</tr>"
                        
                        html_table += "</table></div>"
                        st.markdown(html_table, unsafe_allow_html=True)
        
        else:
            # Hi·ªÉn th·ªã pivot table th√¥ng th∆∞·ªùng
            st.subheader("üìä Pivot Table")
            
            # T·∫°o HTML table cho pivot th√¥ng th∆∞·ªùng
            html_table = "<div class='full-width-table'>"
            html_table += "<table style='width:100%; border-collapse: collapse; font-size: 12px;'>"
            
            # Header
            html_table += "<tr style='background-color: #f0f2f6;'>"
            html_table += "<th style='border: 1px solid #ddd; padding: 8px;'>Index</th>"
            if isinstance(pivot, pd.DataFrame):
                for col in pivot.columns:
                    html_table += f"<th style='border: 1px solid #ddd; padding: 8px; text-align: center;'>{col}</th>"
            else:
                html_table += "<th style='border: 1px solid #ddd; padding: 8px; text-align: center;'>Gi√° tr·ªã</th>"
            html_table += "</tr>"
            
            # Data
            if isinstance(pivot, pd.DataFrame):
                for idx in pivot.index:
                    html_table += "<tr>"
                    html_table += f"<td style='border: 1px solid #ddd; padding: 8px;'>{idx}</td>"
                    for col in pivot.columns:
                        value = pivot.loc[idx, col]
                        html_table += f"<td style='border: 1px solid #ddd; padding: 8px; text-align: right;' class='number-cell'>{value}</td>"
                    html_table += "</tr>"
            else:
                for idx in pivot.index:
                    html_table += "<tr>"
                    html_table += f"<td style='border: 1px solid #ddd; padding: 8px;'>{idx}</td>"
                    value_formatted = f"{pivot.loc[idx]:,.0f}".replace(',', '.')
                    html_table += f"<td style='border: 1px solid #ddd; padding: 8px; text-align: right;' class='number-cell'>{value_formatted}</td>"
                    html_table += "</tr>"
            
            html_table += "</table></div>"
            st.markdown(html_table, unsafe_allow_html=True)
    
            html_table += "</table></div>"
            st.markdown(html_table, unsafe_allow_html=True)
    
    def create_sparkline_charts(self, pivot, report_type):
        """T·∫°o bi·ªÉu ƒë·ªì sparkline cho m·ªói d√≤ng trong pivot table"""
        if pivot is None or not isinstance(pivot, pd.DataFrame):
            return None
        
        # X√°c ƒë·ªãnh c·ªôt th·ªùi gian d·ª±a v√†o report_type
        time_column_name = {
            "Theo Tu·∫ßn": "Tu·∫ßn",
            "Theo Th√°ng": "Th√°ng",
            "Theo Qu√Ω": "Qu√Ω",
            "Theo NƒÉm": "NƒÉm"
        }.get(report_type, "Th√°ng")
        
        # T·∫°o dataframe cho bi·ªÉu ƒë·ªì
        sparklines_data = {}
        
        # Reset index ƒë·ªÉ d·ªÖ d√†ng x·ª≠ l√Ω
        if isinstance(pivot.index, pd.MultiIndex):
            pivot_reset = pivot.reset_index()
        else:
            pivot_reset = pivot.reset_index()
            
        # L·∫•y t√™n c·ªßa c√°c c·ªôt ch·ª©a gi√° tr·ªã
        value_columns = [col for col in pivot.columns 
                         if not isinstance(col, tuple) or time_column_name in col]
        
        # T·∫°o sparkline cho m·ªói d√≤ng
        for idx, row in pivot_reset.iterrows():
                
            # L·∫•y t√™n h√†ng
            if isinstance(pivot.index, pd.MultiIndex):
                row_key = tuple(row[list(pivot.index.names)])
            else:
                row_key = row[pivot.index.name]
                
            # L·∫•y gi√° tr·ªã cho sparkline (extract t·ª´ HTML n·∫øu c·∫ßn)
            values = []
            for col in value_columns:
                try:
                    if col in pivot.columns:
                        val = pivot.loc[row_key, col]
                        # N·∫øu l√† chu·ªói HTML, l·∫•y s·ªë ƒë·∫ßu ti√™n
                        if isinstance(val, str):
                            import re
                            numbers = re.findall(r'[\d.]+', val.replace('.', ''))
                            if numbers:
                                values.append(int(numbers[0].replace('.', '')))
                            else:
                                values.append(0)
                        else:
                            values.append(val)
                except:
                    values.append(0)
            
            # T·∫°o sparkline figure
            fig = go.Figure()
            
            # Th√™m line chart
            fig.add_trace(go.Scatter(
                y=values,
                mode='lines+markers',
                line=dict(width=2, color='royalblue'),
                marker=dict(size=4),
                showlegend=False
            ))
            
            # Highlight ƒëi·ªÉm cao nh·∫•t
            if values:
                max_idx = np.argmax(values)
                fig.add_trace(go.Scatter(
                    x=[max_idx],
                    y=[values[max_idx]],
                    mode='markers',
                    marker=dict(size=6, color='green'),
                    showlegend=False
                ))
                
                # Highlight ƒëi·ªÉm th·∫•p nh·∫•t
                min_idx = np.argmin(values)
                fig.add_trace(go.Scatter(
                    x=[min_idx],
                    y=[values[min_idx]],
                    mode='markers',
                    marker=dict(size=6, color='red'),
                    showlegend=False
                ))
            
            # ƒê·ªãnh d·∫°ng figure
            fig.update_layout(
                margin=dict(l=0, r=0, t=0, b=0),
                height=30,
                width=150,
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                xaxis=dict(
                    showticklabels=False,
                    showgrid=False,
                    zeroline=False
                ),
                yaxis=dict(
                    showticklabels=False,
                    showgrid=False,
                    zeroline=False
                ),
                hovermode=False
            )
            
            # L∆∞u figure
            sparklines_data[row_key] = fig
            
        return sparklines_data
    
    def create_individual_trend_chart(self, data, content_item, time_col, chart_type="ƒê∆∞·ªùng", normalize=False):
        """T·∫°o bi·ªÉu ƒë·ªì xu h∆∞·ªõng ri√™ng cho m·ªôt n·ªôi dung c·ª• th·ªÉ"""
        try:
            # L·ªçc d·ªØ li·ªáu cho n·ªôi dung ƒë∆∞·ª£c ch·ªçn
            content_data = data[data['N·ªôi dung'] == content_item]
            
            if content_data.empty:
                return None
                
            # T·∫°o pivot table cho n·ªôi dung n√†y
            pivot_data = pd.pivot_table(
                content_data,
                index='N·ªôi dung',
                columns=time_col,
                values='S·ªë li·ªáu',
                aggfunc='sum',
                fill_value=0
            )
            
            # L·∫•y gi√° tr·ªã cho bi·ªÉu ƒë·ªì
            time_values = list(pivot_data.columns)
            data_values = pivot_data.iloc[0].values
            
            # Chu·∫©n h√≥a d·ªØ li·ªáu n·∫øu c·∫ßn
            if normalize and max(data_values) > 0:
                data_values = data_values / max(data_values) * 100
            
            # B·ªé HI·ªÇN TH·ªä S·ªê ∆ØU TI√äN
            title = f"{content_item}"
            
            # T·∫°o bi·ªÉu ƒë·ªì t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i ƒë√£ ch·ªçn
            if chart_type == "ƒê∆∞·ªùng":
                fig = px.line(
                    x=time_values,
                    y=data_values,
                    markers=True,
                    title=title
                )
                
                # Th√™m ƒëi·ªÉm cao nh·∫•t v√† th·∫•p nh·∫•t
                if len(data_values) > 0:
                    max_idx = np.argmax(data_values)
                    fig.add_trace(go.Scatter(
                        x=[time_values[max_idx]],
                        y=[data_values[max_idx]],
                        mode='markers',
                        marker=dict(size=10, color='green', symbol='circle'),
                        name='Cao nh·∫•t',
                        showlegend=False
                    ))
                    
                    min_idx = np.argmin(data_values)
                    fig.add_trace(go.Scatter(
                        x=[time_values[min_idx]],
                        y=[data_values[min_idx]],
                        mode='markers',
                        marker=dict(size=10, color='red', symbol='circle'),
                        name='Th·∫•p nh·∫•t',
                        showlegend=False
                    ))
                
            elif chart_type == "C·ªôt":
                fig = px.bar(
                    x=time_values,
                    y=data_values,
                    title=title
                )
                
                # Highlight c·ªôt cao nh·∫•t v√† th·∫•p nh·∫•t
                if len(data_values) > 0:
                    max_idx = np.argmax(data_values)
                    min_idx = np.argmin(data_values)
                    
                    bar_colors = ['royalblue'] * len(data_values)
                    bar_colors[max_idx] = 'green'
                    bar_colors[min_idx] = 'red'
                    
                    fig.update_traces(marker_color=bar_colors)
                
            else:  # V√πng
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=time_values,
                    y=data_values,
                    mode='lines',
                    fill='tozeroy',
                    line=dict(color='royalblue'),
                    name=content_item
                ))
                
                # Th√™m ƒëi·ªÉm cao nh·∫•t v√† th·∫•p nh·∫•t
                if len(data_values) > 0:
                    max_idx = np.argmax(data_values)
                    fig.add_trace(go.Scatter(
                        x=[time_values[max_idx]],
                        y=[data_values[max_idx]],
                        mode='markers',
                        marker=dict(size=10, color='green', symbol='circle'),
                        name='Cao nh·∫•t',
                        showlegend=False
                    ))
                    
                    min_idx = np.argmin(data_values)
                    fig.add_trace(go.Scatter(
                        x=[time_values[min_idx]],
                        y=[data_values[min_idx]],
                        mode='markers',
                        marker=dict(size=10, color='red', symbol='circle'),
                        name='Th·∫•p nh·∫•t',
                        showlegend=False
                    ))
                
                fig.update_layout(title=title)
            
            # C·∫≠p nh·∫≠t layout
            y_title = "% (so v·ªõi gi√° tr·ªã cao nh·∫•t)" if normalize else "Gi√° tr·ªã"
            time_col_display = {"Tu·∫ßn": "Tu·∫ßn", "Th√°ng": "Th√°ng", "Qu√Ω": "Qu√Ω", "NƒÉm": "NƒÉm"}.get(time_col, time_col)
            
            fig.update_layout(
                xaxis_title=time_col_display,
                yaxis_title=y_title,
                height=300,
                margin=dict(l=10, r=10, t=40, b=40),
                hovermode="x",
                plot_bgcolor='rgba(240,240,240,0.1)'
            )
            
            # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu
            if len(data_values) > 2:
                x_values = list(range(len(data_values)))
                coeffs = np.polyfit(x_values, data_values, 1)
                trend_line = np.poly1d(coeffs)(x_values)
                
                # X√°c ƒë·ªãnh m√†u ƒë∆∞·ªùng xu h∆∞·ªõng
                trend_color = 'green' if coeffs[0] > 0 else 'red'
                
                if chart_type in ["ƒê∆∞·ªùng", "V√πng"]:
                    fig.add_trace(go.Scatter(
                        x=time_values,
                        y=trend_line,
                        mode='lines',
                        line=dict(color=trend_color, dash='dash', width=2),
                        name='Xu h∆∞·ªõng',
                        showlegend=False
                    ))
            
            return fig
            
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì cho {content_item}: {str(e)}")
            return None

def main():
    # HEADER V·ªöI LOGO TH·∫¨T
    col1, col2, col3 = st.columns([1, 3, 1])
    
    with col2:
        # T·ª± ƒë·ªông t√¨m ƒë∆∞·ªùng d·∫´n ƒë√∫ng
        script_dir = os.path.dirname(os.path.abspath(__file__))
        logo_path = os.path.join(script_dir, "assets", "logo.png")
        
        # Hi·ªÉn th·ªã logo t·ª´ file
        try:
            if os.path.exists(logo_path):
                # Header v·ªõi logo cƒÉn gi·ªØa
                st.markdown("""
                <div style='text-align: center; padding: 30px 0;'>
                """, unsafe_allow_html=True)
                
                # Logo to h∆°n, cƒÉn gi·ªØa
                col_left, col_center, col_right = st.columns([1, 1, 1])
                with col_center:
                    st.image(logo_path, width=150)  # Logo to h∆°n n·ªØa
                
                # Title cƒÉn gi·ªØa, ƒë∆°n gi·∫£n
                st.markdown("""
                    <div style='text-align: center; margin-top: 20px;'>
                        <h1 style='color: #1f77b4; margin: 0; font-size: 3rem; font-weight: bold;'>
                            DASHBOARD PH√íNG H√ÄNH CH√çNH
                        </h1>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                # Fallback n·∫øu kh√¥ng c√≥ logo - header ƒë·∫πp v·ªõi emoji
                st.markdown("""
                <div style='text-align: center; padding: 30px 0;'>
                    <div style='font-size: 5rem; margin-bottom: 20px;'>üè•</div>
                    <h1 style='color: #1f77b4; margin: 0; font-size: 3rem; font-weight: bold;'>
                        DASHBOARD PH√íNG H√ÄNH CH√çNH
                    </h1>
                </div>
                """, unsafe_allow_html=True)
        except Exception as e:
            # N·∫øu c√≥ l·ªói, d√πng emoji logo ƒë·∫πp
            st.markdown("""
            <div style='text-align: center; padding: 30px 0;'>
                <div style='font-size: 5rem; margin-bottom: 20px;'>üè•</div>
                <h1 style='color: #1f77b4; margin: 0; font-size: 3rem; font-weight: bold;'>
                    DASHBOARD PH√íNG H√ÄNH CH√çNH
                </h1>
            </div>
            """, unsafe_allow_html=True)
        
        # Subtitle chung
        st.markdown("""
        <div style='text-align: center;'>
            <p style='color: #888; font-style: italic; margin-top: 10px;'>
                üìä V·ªõi th·ª© t·ª± ∆∞u ti√™n c·ªë ƒë·ªãnh v√† bi·∫øn ƒë·ªông inline
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Th√™m th√¥ng tin project
    with st.expander("‚ÑπÔ∏è Th√¥ng tin v·ªÅ Dashboard", expanded=False):
        st.markdown("""
        **üè• Dashboard chuy√™n bi·ªát cho Ph√≤ng H√†nh Ch√≠nh B·ªánh vi·ªán**
        
        **‚ú® T√≠nh nƒÉng n·ªïi b·∫≠t:**
        - üìã 13 danh m·ª•c v√† 70+ n·ªôi dung theo th·ª© t·ª± ∆∞u ti√™n c·ªë ƒë·ªãnh
        - üìà Hi·ªÉn th·ªã bi·∫øn ƒë·ªông tu·∫ßn (%) ngay trong gi√° tr·ªã: `1.234.567 (‚Üë15%)`
        - üîí C·ªôt "N·ªôi dung" v√† "T·ªïng" ƒë√≥ng bƒÉng khi scroll
        - üìä Sparkline xu h∆∞·ªõng cho t·ª´ng danh m·ª•c
        - üíæ Xu·∫•t b√°o c√°o Excel ƒëa sheet v√† CSV
        
        **üë®‚Äçüíª Ph√°t tri·ªÉn b·ªüi:** D∆∞∆°ng H·ªØu Quang - Ph√≤ng H√†nh Ch√≠nh
        **üìÖ Phi√™n b·∫£n:** 1.0 - 2025
        **üåê GitHub:** https://github.com/corner-25/dashboard-phong-hanh-chinh
        """)
    
    # Footer chuy√™n nghi·ªáp
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 15px; background-color: #f8f9fa; border-radius: 10px; margin-top: 20px;'>
        <p style='margin: 0; font-size: 14px;'>
            üè• <strong>Ph√≤ng H√†nh Ch√≠nh - B·ªánh Vi·ªán</strong> | 
            üåê <a href="https://github.com/corner-25/dashboard-phong-hanh-chinh" target="_blank" style="text-decoration: none; color: #1f77b4;">GitHub Project</a>
        </p>
        <p style='margin: 5px 0 0 0; font-size: 12px; color: #888;'>
            ¬© 2025 Dashboard Ph√≤ng H√†nh Ch√≠nh - Ph√°t tri·ªÉn b·ªüi <strong>D∆∞∆°ng H·ªØu Quang</strong>
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Kh·ªüi t·∫°o dashboard
    dashboard = PivotTableDashboard()
    
    # Load d·ªØ li·ªáu
    st.sidebar.header("üìÅ D·ªØ li·ªáu")
    
    # Ch·ªçn c√°ch nh·∫≠p d·ªØ li·ªáu
    data_source = st.sidebar.radio(
        "Ch·ªçn ngu·ªìn d·ªØ li·ªáu",
        ["Upload file", "Nh·∫≠p ƒë∆∞·ªùng d·∫´n file"]
    )
    
    file_loaded = False
    
    if data_source == "Upload file":
        uploaded_file = st.sidebar.file_uploader("Ch·ªçn file Excel", type=['xlsx', 'xls'])
        if uploaded_file is not None:
            if dashboard.load_data(uploaded_file):
                st.sidebar.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                file_loaded = True
    else:
        # Nh·∫≠p ƒë∆∞·ªùng d·∫´n file
        file_path = st.sidebar.text_input(
            "ƒê∆∞·ªùng d·∫´n file Excel",
            value="",
            help="ƒê·ªÉ tr·ªëng v√† s·ª≠ d·ª•ng Upload file ·ªü tr√™n"
        )
        
        if st.sidebar.button("T·∫£i file", use_container_width=True):
            if os.path.exists(file_path):
                if dashboard.load_data(file_path):
                    st.sidebar.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                    file_loaded = True
                    # L∆∞u ƒë∆∞·ªùng d·∫´n v√†o session state
                    st.session_state['file_path'] = file_path
            else:
                st.sidebar.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}")
        
        # T·ª± ƒë·ªông load l·∫°i n·∫øu ƒë√£ c√≥ ƒë∆∞·ªùng d·∫´n trong session
        if 'file_path' in st.session_state:
            if os.path.exists(st.session_state['file_path']):
                dashboard.load_data(st.session_state['file_path'])
                file_loaded = True
    
    if file_loaded and dashboard.data is not None:
        # T·∫°o c√°c c√†i ƒë·∫∑t v√† b·ªô l·ªçc
        report_type, rows, cols, values, agg_func, show_ratio_inline = dashboard.create_pivot_settings()
        time_range, years, months, weeks, categories = dashboard.create_filters()
        
        # √Åp d·ª•ng b·ªô l·ªçc
        filtered_data = dashboard.filter_data(time_range, years, months, weeks, categories)
        
        # Hi·ªÉn th·ªã th√¥ng tin debug
        st.sidebar.info(f"üìä D·ªØ li·ªáu: {len(filtered_data):,} d√≤ng")
        
        # TH√äM DEBUG CHI TI·∫æT V·ªÄ BI·∫æN ƒê·ªòNG
        if dashboard.data is not None:
            total_rows = len(dashboard.data)
            ratio_rows = len(dashboard.data[pd.notna(dashboard.data['T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc'])])
            st.sidebar.success(f"üîÑ Bi·∫øn ƒë·ªông: {ratio_rows}/{total_rows} d√≤ng c√≥ t·ª∑ l·ªá")
            
            # Hi·ªÉn th·ªã sample d·ªØ li·ªáu bi·∫øn ƒë·ªông
            sample_ratio = dashboard.data[pd.notna(dashboard.data['T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc'])].head(5)
            if not sample_ratio.empty:
                st.sidebar.success(f"üìã Sample bi·∫øn ƒë·ªông:")
                for _, row in sample_ratio.iterrows():
                    ratio_val = row['T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc']
                    content = row['N·ªôi dung'][:20] + "..." if len(row['N·ªôi dung']) > 20 else row['N·ªôi dung']
                    st.sidebar.text(f"   {content}: {ratio_val:.1f}%")
            
            # Hi·ªÉn th·ªã sample d·ªØ li·ªáu tu·∫ßn
            unique_weeks = sorted(dashboard.data['Tu·∫ßn'].unique())
            st.sidebar.info(f"üìÖ C√°c tu·∫ßn: {unique_weeks}")
            
            # Ki·ªÉm tra d·ªØ li·ªáu theo tu·∫ßn
            if len(unique_weeks) > 1:
                st.sidebar.success(f"‚úÖ C√≥ {len(unique_weeks)} tu·∫ßn - ƒë·ªß ƒë·ªÉ t√≠nh bi·∫øn ƒë·ªông")
            else:
                st.sidebar.warning(f"‚ö†Ô∏è Ch·ªâ c√≥ {len(unique_weeks)} tu·∫ßn - kh√¥ng ƒë·ªß ƒë·ªÉ t√≠nh bi·∫øn ƒë·ªông")
        
        # N√∫t l√†m m·ªõi d·ªØ li·ªáu
        if st.sidebar.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu", use_container_width=True):
            if 'file_path' in st.session_state:
                dashboard.load_data(st.session_state['file_path'])
                st.rerun()
        
        # Tabs cho c√°c ch·∫ø ƒë·ªô xem
        tab1, tab2, tab3 = st.tabs(["üìã Pivot Table", "üìä Xu h∆∞·ªõng theo th·ªùi gian", "üíæ Xu·∫•t b√°o c√°o"])
        
        with tab1:
            st.header("Pivot Table v·ªõi bi·∫øn ƒë·ªông inline")
            
            # T·∫°o pivot table v·ªõi bi·∫øn ƒë·ªông
            pivot = dashboard.create_hierarchical_pivot_table_with_ratio(
                filtered_data, rows, cols, values, agg_func, show_ratio_inline
            )
            
            if pivot is not None:
                # Hi·ªÉn th·ªã pivot table c·∫£i ti·∫øn
                dashboard.display_hierarchical_pivot_improved(pivot, filtered_data)
                
                # T√πy ch·ªçn xu·∫•t
                col1, col2 = st.columns(2)
                with col1:
                    # T·∫°o CSV t·ª´ d·ªØ li·ªáu g·ªëc (kh√¥ng c√≥ HTML)
                    if show_ratio_inline:
                        st.info("üí° Xu·∫•t CSV s·∫Ω ch·ª©a d·ªØ li·ªáu g·ªëc (kh√¥ng c√≥ bi·∫øn ƒë·ªông HTML)")
                    
                    # T·∫°o pivot ƒë∆°n gi·∫£n cho CSV
                    simple_pivot = pd.pivot_table(
                        filtered_data,
                        index=rows if rows else None,
                        columns=cols if cols else None,
                        values=values,
                        aggfunc=agg_func,
                        fill_value=0,
                        margins=False  # B·ªé T·ªîNG CHUNG
                    )
                    
                    csv = simple_pivot.to_csv(encoding='utf-8-sig')
                    st.download_button(
                        "üì• T·∫£i CSV",
                        csv,
                        f"pivot_table_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        "text/csv"
                    )
                
                # B·ªé PH·∫¶N SPARKLINE ·ªû CU·ªêI - ƒë√£ chuy·ªÉn v√†o trong t·ª´ng danh m·ª•c
        
        with tab2:
            st.header("Xu h∆∞·ªõng theo th·ªùi gian (theo th·ª© t·ª± ∆∞u ti√™n)")
            
            # X√°c ƒë·ªãnh tr∆∞·ªùng th·ªùi gian d·ª±a v√†o ki·ªÉu b√°o c√°o
            time_col = {
                "Theo Tu·∫ßn": "Tu·∫ßn", 
                "Theo Th√°ng": "Th√°ng", 
                "Theo Qu√Ω": "Qu√Ω", 
                "Theo NƒÉm": "NƒÉm"
            }.get(report_type, "Th√°ng")
            
            # Hi·ªÉn th·ªã t√πy ch·ªçn cho bi·ªÉu ƒë·ªì
            col1, col2, col3 = st.columns(3)
            
            with col1:
                chart_type = st.selectbox(
                    "Lo·∫°i bi·ªÉu ƒë·ªì",
                    ["ƒê∆∞·ªùng", "C·ªôt", "V√πng"]
                )
            
            with col2:
                normalize = st.checkbox("Chu·∫©n h√≥a (so s√°nh %)", value=False)
                
            with col3:
                num_cols = st.select_slider(
                    "S·ªë c·ªôt hi·ªÉn th·ªã",
                    options=[1, 2, 3],
                    value=2
                )
            
            # L·ªçc d·ªØ li·ªáu cho c√°c N·ªôi dung (hi·ªÉn th·ªã theo th·ª© t·ª± ∆∞u ti√™n)
            unique_contents = filtered_data['N·ªôi dung'].unique()
            sorted_contents = sorted(unique_contents, key=lambda x: dashboard.content_priority.get(x, 999))
            
            content_filter = st.multiselect(
                "Ch·ªçn N·ªôi dung c·∫ßn hi·ªÉn th·ªã (theo th·ª© t·ª± ∆∞u ti√™n)",
                sorted_contents,
                default=sorted_contents[:10]  # M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã 10 n·ªôi dung ƒë·∫ßu ti√™n
            )
            
            filtered_for_charts = filtered_data[filtered_data['N·ªôi dung'].isin(content_filter)]
            
            if filtered_for_charts.empty:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn!")
            else:
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì cho t·ª´ng n·ªôi dung ri√™ng bi·ªát
                st.subheader(f"Bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo {time_col} cho t·ª´ng N·ªôi dung")
                
                # S·∫Øp x·∫øp d·ªØ li·ªáu theo th·ª© t·ª± ∆∞u ti√™n
                sorted_data = filtered_for_charts.copy()
                sorted_data = sorted_data.sort_values(['Danh_m·ª•c_th·ª©_t·ª±', 'N·ªôi_dung_th·ª©_t·ª±'])
                
                # T·∫°o container cho c√°c danh m·ª•c
                categories = sorted_data['Danh m·ª•c'].unique()
                sorted_categories = sorted(categories, key=lambda x: dashboard.category_priority.get(x, 999))
                
                for category in sorted_categories:
                    # Hi·ªÉn th·ªã Danh m·ª•c v·ªõi expander (B·ªé HI·ªÇN TH·ªä S·ªê ∆ØU TI√äN)
                    with st.expander(f"üìÅ {category}", expanded=True):
                        # L·ªçc d·ªØ li·ªáu cho danh m·ª•c n√†y
                        category_data = sorted_data[sorted_data['Danh m·ª•c'] == category]
                        
                        # L·∫•y danh s√°ch n·ªôi dung trong danh m·ª•c (ƒë√£ s·∫Øp x·∫øp)
                        category_contents = category_data['N·ªôi dung'].unique()
                        sorted_category_contents = sorted(category_contents, 
                                                        key=lambda x: dashboard.content_priority.get(x, 999))
                        
                        # T·∫°o grid hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                        cols_container = st.columns(num_cols)
                        
                        # Duy·ªát qua t·ª´ng n·ªôi dung v√† t·∫°o bi·ªÉu ƒë·ªì ri√™ng
                        for i, content_item in enumerate(sorted_category_contents):
                            # T·∫°o bi·ªÉu ƒë·ªì cho n·ªôi dung n√†y
                            fig = dashboard.create_individual_trend_chart(
                                category_data, content_item, time_col, chart_type, normalize
                            )
                            
                            if fig is not None:
                                # Hi·ªÉn th·ªã trong c·ªôt t∆∞∆°ng ·ª©ng
                                col_idx = i % num_cols
                                with cols_container[col_idx]:
                                    st.plotly_chart(fig, use_container_width=True)
                
                # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
                with st.expander("Xem d·ªØ li·ªáu chi ti·∫øt (theo th·ª© t·ª± ∆∞u ti√™n)"):
                    # T·∫°o pivot cho xem d·ªØ li·ªáu chi ti·∫øt
                    detail_pivot = pd.pivot_table(
                        filtered_for_charts,
                        index=['Danh m·ª•c', 'N·ªôi dung'],
                        columns=time_col,
                        values='S·ªë li·ªáu',
                        aggfunc='sum',
                        fill_value=0
                    )
                    
                    # S·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n
                    detail_pivot_sorted = detail_pivot.copy()
                    detail_pivot_sorted['Danh_m·ª•c_th·ª©_t·ª±'] = detail_pivot_sorted.index.get_level_values('Danh m·ª•c').map(dashboard.category_priority).fillna(999)
                    detail_pivot_sorted['N·ªôi_dung_th·ª©_t·ª±'] = detail_pivot_sorted.index.get_level_values('N·ªôi dung').map(dashboard.content_priority).fillna(999)
                    detail_pivot_sorted = detail_pivot_sorted.sort_values(['Danh_m·ª•c_th·ª©_t·ª±', 'N·ªôi_dung_th·ª©_t·ª±'])
                    detail_pivot_sorted = detail_pivot_sorted.drop(columns=['Danh_m·ª•c_th·ª©_t·ª±', 'N·ªôi_dung_th·ª©_t·ª±'])
                    
                    # Hi·ªÉn th·ªã v·ªõi HTML table ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß s·ªë
                    html_table = "<div class='full-width-table'>"
                    html_table += "<table style='width:100%; border-collapse: collapse; font-size: 11px;'>"
                    html_table += "<tr style='background-color: #f0f2f6;'>"
                    html_table += "<th style='border: 1px solid #ddd; padding: 6px;'>Danh m·ª•c</th>"
                    html_table += "<th style='border: 1px solid #ddd; padding: 6px;'>N·ªôi dung</th>"
                    for col in detail_pivot_sorted.columns:
                        html_table += f"<th style='border: 1px solid #ddd; padding: 6px; text-align: center;'>{col}</th>"
                    html_table += "</tr>"
                    
                    for idx in detail_pivot_sorted.index:
                        html_table += "<tr>"
                        html_table += f"<td style='border: 1px solid #ddd; padding: 6px;'>{idx[0]}</td>"
                        html_table += f"<td style='border: 1px solid #ddd; padding: 6px;'>{idx[1]}</td>"
                        for col in detail_pivot_sorted.columns:
                            value = detail_pivot_sorted.loc[idx, col]
                            formatted_value = f"{value:,.0f}".replace(',', '.')
                            html_table += f"<td style='border: 1px solid #ddd; padding: 6px; text-align: right;' class='number-cell'>{formatted_value}</td>"
                        html_table += "</tr>"
                    
                    html_table += "</table></div>"
                    st.markdown(html_table, unsafe_allow_html=True)
        
        with tab3:
            st.header("Xu·∫•t b√°o c√°o")
            
            # T·∫°o b√°o c√°o t·ªïng h·ª£p
            report_format = st.selectbox(
                "Ch·ªçn ƒë·ªãnh d·∫°ng",
                ["Excel ƒëa sheet v·ªõi th·ª© t·ª± ∆∞u ti√™n", "Excel ƒë∆°n gi·∫£n", "CSV"]
            )
            
            if st.button("T·∫°o b√°o c√°o", use_container_width=True):
                if report_format == "Excel ƒëa sheet v·ªõi th·ª© t·ª± ∆∞u ti√™n":
                    # T·∫°o file Excel v·ªõi nhi·ªÅu sheet
                    output_file = f'bao_cao_phong_hanh_chinh_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
                    with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
                        # Sheet 1: D·ªØ li·ªáu g·ªëc (ƒë√£ s·∫Øp x·∫øp)
                        filtered_data_export = filtered_data.drop(columns=['Danh_m·ª•c_th·ª©_t·ª±', 'N·ªôi_dung_th·ª©_t·ª±'], errors='ignore')
                        filtered_data_export.to_excel(writer, sheet_name='D·ªØ li·ªáu g·ªëc', index=False)
                        
                        # Sheet 2: Pivot table (d·ªØ li·ªáu s·ªë, kh√¥ng c√≥ HTML)
                        simple_pivot = pd.pivot_table(
                            filtered_data,
                            index=rows if rows else None,
                            columns=cols if cols else None,
                            values=values,
                            aggfunc=agg_func,
                            fill_value=0,
                            margins=False  # B·ªé T·ªîNG CHUNG
                        )
                        simple_pivot.to_excel(writer, sheet_name='Pivot Table')
                        
                        # Sheet 3: T·ªïng h·ª£p theo danh m·ª•c (theo th·ª© t·ª± ∆∞u ti√™n)
                        category_summary = filtered_data.groupby('Danh m·ª•c')['S·ªë li·ªáu'].agg(['sum', 'mean', 'count'])
                        category_summary['Th·ª©_t·ª±'] = category_summary.index.map(dashboard.category_priority).fillna(999)
                        category_summary = category_summary.sort_values('Th·ª©_t·ª±').drop(columns=['Th·ª©_t·ª±'])
                        category_summary.to_excel(writer, sheet_name='Theo danh m·ª•c')
                        
                        # Sheet 4: T·ªïng h·ª£p theo th·ªùi gian
                        time_summary = filtered_data.pivot_table(
                            index=time_col,
                            columns='Danh m·ª•c',
                            values='S·ªë li·ªáu',
                            aggfunc='sum',
                            fill_value=0
                        )
                        time_summary.to_excel(writer, sheet_name='Theo th·ªùi gian')
                        
                        # Sheet 5: T·ªïng h·ª£p theo n·ªôi dung (theo th·ª© t·ª± ∆∞u ti√™n)
                        content_summary = filtered_data.pivot_table(
                            index=['Danh m·ª•c', 'N·ªôi dung'],
                            values='S·ªë li·ªáu',
                            aggfunc=['sum', 'mean', 'count'],
                            fill_value=0
                        )
                        content_summary.to_excel(writer, sheet_name='Theo n·ªôi dung')
                        
                        # Sheet 6: T·ª∑ l·ªá thay ƒë·ªïi
                        ratio_data = filtered_data[filtered_data['T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc'] != 0]
                        if not ratio_data.empty:
                            ratio_summary = ratio_data.pivot_table(
                                index=['Danh m·ª•c', 'N·ªôi dung'],
                                columns='Tu·∫ßn',
                                values=['T·ª∑_l·ªá_tu·∫ßn_tr∆∞·ªõc', 'Thay_ƒë·ªïi_tu·∫ßn_tr∆∞·ªõc'],
                                aggfunc='mean',
                                fill_value=None
                            )
                            ratio_summary.to_excel(writer, sheet_name='T·ª∑ l·ªá thay ƒë·ªïi')
                        
                        # Sheet 7: C·∫•u h√¨nh th·ª© t·ª± ∆∞u ti√™n c·ªë ƒë·ªãnh
                        priority_df = pd.DataFrame([
                            {'Lo·∫°i': 'Danh m·ª•c', 'T√™n': k, 'Th·ª© t·ª±': v} 
                            for k, v in dashboard.category_priority.items()
                        ] + [
                            {'Lo·∫°i': 'N·ªôi dung', 'T√™n': k, 'Th·ª© t·ª±': v} 
                            for k, v in dashboard.content_priority.items()
                        ])
                        priority_df = priority_df.sort_values(['Lo·∫°i', 'Th·ª© t·ª±'])
                        priority_df.to_excel(writer, sheet_name='Th·ª© t·ª± ∆∞u ti√™n', index=False)
                    
                    with open(output_file, 'rb') as f:
                        st.download_button(
                            "üì• T·∫£i b√°o c√°o Excel v·ªõi th·ª© t·ª± ∆∞u ti√™n",
                            f.read(),
                            output_file,
                            "application/vnd.ms-excel"
                        )
                    
                    st.success("‚úÖ ƒê√£ t·∫°o b√°o c√°o v·ªõi th·ª© t·ª± ∆∞u ti√™n th√†nh c√¥ng!")
                
                elif report_format == "Excel ƒë∆°n gi·∫£n":
                    # T·∫°o file Excel ƒë∆°n gi·∫£n
                    output_file = f'bao_cao_don_gian_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
                    with pd.ExcelWriter(output_file) as writer:
                        filtered_data_export = filtered_data.drop(columns=['Danh_m·ª•c_th·ª©_t·ª±', 'N·ªôi_dung_th·ª©_t·ª±'], errors='ignore')
                        filtered_data_export.to_excel(writer, index=False)
                    
                    with open(output_file, 'rb') as f:
                        st.download_button(
                            "üì• T·∫£i Excel ƒë∆°n gi·∫£n",
                            f.read(),
                            output_file,
                            "application/vnd.ms-excel"
                        )
                    
                    st.success("‚úÖ ƒê√£ t·∫°o b√°o c√°o ƒë∆°n gi·∫£n th√†nh c√¥ng!")
                
                else:  # CSV
                    filtered_data_export = filtered_data.drop(columns=['Danh_m·ª•c_th·ª©_t·ª±', 'N·ªôi_dung_th·ª©_t·ª±'], errors='ignore')
                    csv = filtered_data_export.to_csv(index=False, encoding='utf-8-sig')
                    st.download_button(
                        "üì• T·∫£i CSV",
                        csv,
                        f"bao_cao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        "text/csv"
                    )
                    
                    st.success("‚úÖ ƒê√£ t·∫°o file CSV th√†nh c√¥ng!")
    
    else:
        st.info("üëÜ Vui l√≤ng t·∫£i l√™n file Excel ho·∫∑c nh·∫≠p ƒë∆∞·ªùng d·∫´n file ƒë·ªÉ b·∫Øt ƒë·∫ßu")
        
        # H∆∞·ªõng d·∫´n
        with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Dashboard Ph√≤ng H√†nh Ch√≠nh"):
            st.markdown("""
            ### üéØ Dashboard chuy√™n bi·ªát cho Ph√≤ng H√†nh Ch√≠nh
            
            #### ‚ú® **T√≠nh nƒÉng ƒë·∫∑c bi·ªát:**
            
            **1. Th·ª© t·ª± ∆∞u ti√™n c·ªë ƒë·ªãnh:**
            - ü•á T·ª± ƒë·ªông s·∫Øp x·∫øp theo th·ª© t·ª± quan tr·ªçng c√¥ng vi·ªác
            - üìã 13 danh m·ª•c ch√≠nh t·ª´ "VƒÉn b·∫£n ƒë·∫øn" ƒë·∫øn "B√£i gi·ªØ xe"
            - üìÑ 70 n·ªôi dung ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n
            
            **2. Hi·ªÉn th·ªã s·ªë ƒë·∫ßy ƒë·ªß:**
            - üí∞ Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß s·ªë l·ªõn (v√≠ d·ª•: 1.234.567)
            - üìä B·∫£ng HTML t√πy ch·ªânh kh√¥ng b·ªã c·∫Øt s·ªë
            - üîç Scroll ngang ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu
            
            **3. Bi·∫øn ƒë·ªông inline:**
            - üìà Gi√° tr·ªã v√† bi·∫øn ƒë·ªông trong c√πng m·ªôt √¥
            - üü¢ TƒÉng: "100.000 (‚Üë15%)" 
            - üî¥ Gi·∫£m: "85.000 (‚Üì15%)"
            - ‚ö™ Kh√¥ng ƒë·ªïi: "100.000 (‚Üí0%)"
            
            **4. B·ªè t·ªïng chung:**
            - ‚ùå Kh√¥ng hi·ªÉn th·ªã t·ªïng c·ªßa t·∫•t c·∫£ danh m·ª•c
            - ‚úÖ Ch·ªâ hi·ªÉn th·ªã t·ªïng theo t·ª´ng h√†ng/danh m·ª•c
            
            #### üìÇ **Danh m·ª•c theo th·ª© t·ª± ∆∞u ti√™n:**
            1. **VƒÉn b·∫£n ƒë·∫øn** - Qu·∫£n l√Ω vƒÉn b·∫£n ƒë·∫øn
            2. **VƒÉn b·∫£n ph√°t h√†nh** - Qu·∫£n l√Ω vƒÉn b·∫£n ƒëi
            3. **ChƒÉm s√≥c kh√°ch VIP** - D·ªãch v·ª• VIP
            4. **L·ªÖ t√¢n** - H·ªó tr·ª£ s·ª± ki·ªán
            5. **Ti·∫øp kh√°ch trong n∆∞·ªõc** - ƒê√≥n ti·∫øp kh√°ch
            6. **S·ª± ki·ªán** - T·ªï ch·ª©c s·ª± ki·ªán
            7. **ƒê√≥n ti·∫øp kh√°ch VIP** - D·ªãch v·ª• ƒë·∫∑c bi·ªát
            8. **T·ªï ch·ª©c cu·ªôc h·ªçp tr·ª±c tuy·∫øn** - H·ªçp online
            9. **Trang ƒëi·ªÅu h√†nh t√°c nghi·ªáp** - ƒêHTN
            10. **T·ªï xe** - Qu·∫£n l√Ω v·∫≠n t·∫£i
            11. **T·ªïng ƒë√†i** - D·ªãch v·ª• ƒëi·ªán tho·∫°i
            12. **H·ªá th·ªëng th∆∞ k√Ω B·ªánh vi·ªán** - Qu·∫£n l√Ω th∆∞ k√Ω
            13. **B√£i gi·ªØ xe** - D·ªãch v·ª• ƒë·∫≠u xe
            
            #### üöÄ **C√°ch s·ª≠ d·ª•ng:**
            1. **T·∫£i d·ªØ li·ªáu**: Upload file Excel ho·∫∑c nh·∫≠p ƒë∆∞·ªùng d·∫´n
            2. **Ch·ªçn b√°o c√°o**: Theo Tu·∫ßn/Th√°ng/Qu√Ω/NƒÉm
            3. **L·ªçc d·ªØ li·ªáu**: Ch·ªçn th·ªùi gian v√† danh m·ª•c
            4. **Xem k·∫øt qu·∫£**: Pivot table v·ªõi bi·∫øn ƒë·ªông inline
            5. **Xu·∫•t b√°o c√°o**: Excel/CSV v·ªõi th·ª© t·ª± ∆∞u ti√™n
            
            #### üí° **L·ª£i √≠ch:**
            - ‚ö° **T·ª± ƒë·ªông 100%**: Kh√¥ng c·∫ßn s·∫Øp x·∫øp th·ªß c√¥ng
            - üéØ **∆Øu ti√™n r√µ r√†ng**: Theo t·∫ßm quan tr·ªçng c√¥ng vi·ªác  
            - üìä **Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß**: Kh√¥ng b·ªã m·∫•t s·ªë li·ªáu
            - üìà **Bi·∫øn ƒë·ªông tr·ª±c quan**: Nh√¨n th·∫•y ngay xu h∆∞·ªõng
            - üíæ **Xu·∫•t chuy√™n nghi·ªáp**: B√°o c√°o ƒë·∫ßy ƒë·ªß th√¥ng tin
            
            #### ‚ö†Ô∏è **L∆∞u √Ω:**
            - D·ªØ li·ªáu c·∫ßn c√≥ c·ªôt: Tu·∫ßn, Th√°ng, Danh m·ª•c, N·ªôi dung, S·ªë li·ªáu
            - Th·ª© t·ª± ∆∞u ti√™n ƒë√£ ƒë∆∞·ª£c c·ªë ƒë·ªãnh, kh√¥ng c·∫ßn ƒëi·ªÅu ch·ªânh
            - Bi·∫øn ƒë·ªông ch·ªâ hi·ªÉn th·ªã t·ª´ tu·∫ßn th·ª© 2 tr·ªü ƒëi
            - Bi·∫øn ƒë·ªông ƒë∆∞·ª£c t√≠nh so v·ªõi tu·∫ßn li·ªÅn tr∆∞·ªõc
            """)

def weekly_dashboard_main():
    """Main function cho weekly upload dashboard"""
    
    # Initialize manager
    if 'weekly_manager' not in st.session_state:
        st.session_state.weekly_manager = WeeklyUploadManager()
    
    manager = st.session_state.weekly_manager
    
    # Header
    st.markdown("""
    <div style='background: linear-gradient(135deg, #28a745 0%, #20c997 100%); 
                padding: 20px; border-radius: 10px; margin-bottom: 20px; text-align: center;'>
        <h2 style='color: white; margin: 0;'>üìÖ Weekly Data Upload</h2>
        <p style='color: #f0f0f0; margin: 10px 0 0 0;'>Upload 1 l·∫ßn/tu·∫ßn ‚Ä¢ Auto x√≥a file c≈© ‚Ä¢ Gi·ªØ storage g·ªçn nh·∫π</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Connection status
    connected, status_msg = manager.check_github_connection()
    
    if connected:
        st.success(status_msg)
        
        # Current data status
        current_data, metadata = manager.load_current_data()
        
        if current_data is not None and metadata:
            st.info(f"""
            üìä **File hi·ªán t·∫°i:**
            - üìÑ {metadata.get('filename', 'Unknown')}
            - üìÖ Tu·∫ßn {metadata.get('week_number', '?')}/{metadata.get('year', '?')}
            - ‚è∞ {metadata.get('upload_time', '')[:19]}
            - üìà {metadata.get('row_count', 0):,} d√≤ng
            """)
            
            # Load dashboard v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i
            dashboard = PivotTableDashboard()
            dashboard.data = current_data
            dashboard._apply_priority_order()
            dashboard._calculate_week_over_week_ratio()
            
            # Simple dashboard display
            st.markdown("### üìä Dashboard B√°o C√°o H√†nh Ch√≠nh")
            
            # Basic pivot table
            pivot = dashboard.create_hierarchical_pivot_table_with_ratio(
                dashboard.data, ['Danh m·ª•c', 'N·ªôi dung'], ['Tu·∫ßn'], 'S·ªë li·ªáu', 'sum', True
            )
            
            if pivot is not None:
                dashboard.display_hierarchical_pivot_improved(pivot, dashboard.data)
        
        else:
            st.warning("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu. Upload file Excel ƒë·∫ßu ti√™n!")
        
        # Upload section
        st.markdown("---")
        st.markdown("### üì§ Upload File Excel")
        
        uploaded_file = st.file_uploader("Ch·ªçn file Excel", type=['xlsx', 'xls'])
        
        if uploaded_file is not None:
            try:
                data = pd.read_excel(uploaded_file)
                st.success(f"‚úÖ ƒê·ªçc th√†nh c√¥ng {len(data):,} d√≤ng d·ªØ li·ªáu")
                
                if st.button("üöÄ UPLOAD V√Ä L∆ØU", type="primary"):
                    if manager.upload_new_file(data, uploaded_file.name):
                        st.balloons()
                        st.rerun()
                        
            except Exception as e:
                st.error(f"‚ùå L·ªói ƒë·ªçc file: {str(e)}")
    
    else:
        st.error(status_msg)
        st.info("‚öôÔ∏è Vui l√≤ng c·∫•u h√¨nh GitHub secrets tr√™n Streamlit Cloud")

# Cu·ªëi file
if __name__ == "__main__":
    weekly_dashboard_main()
